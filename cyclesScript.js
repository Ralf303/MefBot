const { Item, User } = require("./db/models");
const { calculateMiningAmount } = require("./utils/helpers");

const CronJob = require("cron").CronJob;
require("dotenv").config({
  path: process.env.NODE_ENV === "production" ? ".env.prod" : ".env.dev",
});

function Cycles(bot) {
  new CronJob(
    "0 0 0 * * *",
    async function () {
      try {
        bot.telegram.sendMessage(
          process.env.CHAT_ID,
          "–í—Å–µ–º —Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏ –µ–±–∞—Ç—åüò¥"
        );
      } catch (error) {
        console.log(error);
      }
    },
    null,
    true,
    "Europe/Moscow"
  );

  new CronJob(
    "0 0 8 * * *",
    async function () {
      try {
        bot.telegram.sendMessage(
          process.env.CHAT_ID,
          "–í—Å–µ–º –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ –µ–±–∞—Ç—å‚òÄÔ∏è"
        );
      } catch (error) {
        console.log(error);
      }
    },
    null,
    true,
    "Europe/Moscow"
  );

  new CronJob(
    "20 0 13 * * *",
    async function () {
      try {
        const drones = await Item.findAll({
          where: {
            itemName: "–î—Ä–æ–Ω –ú–∞–π–Ω–µ—Ä",
            isWorn: true,
          },
        });

        for (const drone of drones) {
          const user = await User.findOne({ where: { id: drone.userId } });
          const minedAmount = calculateMiningAmount(user.balance);
          user.balance += minedAmount;
          await user.save();
          const message = `–Ø –Ω–∞–º–∞–π–Ω–∏–ª ${minedAmount} –º–µ—Ñ–∞ü§ë`;
          await bot.telegram.sendMessage(user.chatId, message);
        }
      } catch (error) {
        console.log(error);
      }
    },
    null,
    true,
    "Europe/Moscow"
  );
}

module.exports = { Cycles };
