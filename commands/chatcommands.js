const { Composer } = require("telegraf");
const CronJob = require("cron").CronJob;
require("dotenv").config({
  path: process.env.NODE_ENV === "production" ? ".env.prod" : ".env.dev",
});

const {
  getRandomInt,
  generateCapcha,
  checkUserSub,
  checkUserProfile,
  shopGenerator,
} = require("../utils/helpers");
const { dice, bandit, userFerma, createRP } = require("../utils/games.js");
const { getUser } = require("../db/functions.js");
const {
  giveCoins,
  giveItem,
  giveCase,
  giveDonateCase,
} = require("./giveScripts.js");
const clothes = require("../itemsObjects/clothes");
const {
  getInventory,
  deleteItem,
  removeItem,
  wearItem,
  getWornItems,
  buyItem,
  getItemInfo,
  checkId,
} = require("../itemsModule/clothesFunctions");
const { buyCase, getCaseInfo } = require("../itemsModule/casesFunctions");
const { resiveLog } = require("../logs/globalLogs");
const { Item } = require("../db/models");
const cases = require("../itemsObjects/cases");
const rp = require("../utils/arrays/rp-array");
const craftService = require("../services/craft-service");
const gemsService = require("../services/gems-service");
const { Keyboard, Key } = require("telegram-keyboard");

const chatCommands = new Composer();
const commands = "https://telegra.ph/RUKOVODSTVO-PO-BOTU-05-13";
let capture = 120394857653;

chatCommands.on("text", async (ctx, next) => {
  const user = await getUser(
    ctx.from.id,
    ctx.from.first_name,
    ctx.from.username
  );
  const userMessage = ctx.message.text.toLowerCase();
  const [word1, word2, word3, word4] = userMessage.split(" ");
  const replyToMessage = ctx.message.reply_to_message;

  if (replyToMessage && replyToMessage.from) {
    const comment = userMessage.split("\n")[1];
    const rpAction = rp[userMessage.split("\n")[0]];
    if (rpAction) {
      await createRP(
        rpAction.value,
        rpAction.emoji,
        ctx,
        replyToMessage,
        comment
      );
    }
  }

  try {
    if (userMessage == "–ø—Ä–æ—Ñ") {
      await checkUserProfile(user, ctx);
    }

    if (userMessage == "–ø—É–ø—Å—ã") {
      try {
        await ctx.telegram.sendMessage(
          ctx.from.id,
          `‚ùóÔ∏è–ü–£–ü–°–´‚ùóÔ∏è\n\n‚Ä¢–ü—É–ø—Å ¬´–£–¥–∞—á–∞¬ª\n–° —ç—Ç–æ–π —à—Ç—É–∫–æ–π –≤–∞–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –±—É–¥–µ—Ç –≤–µ–∑—Ç–∏\n\n‚Ä¢–ü—É–ø—Å ¬´–ö—Ä–∞—Å–Ω–æ—Ä–µ—á–∏–µ¬ª\n–í–∞—à–µ –æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–ø–ª–∞—á–∏–≤–∞—Ç—å—Å—è –≤ –¥–≤–∞ —Ä–∞–∑–∞ –≤—ã—à–µ!\n\n‚Ä¢–ü—É–ø—Å ¬´–•–∞—Ä–∏–∑–º–∞¬ª\n–ü–æ–ª—å–∑—É—è—Å—å —Å–≤–æ–µ–π —Ö–∞—Ä–∏–∑–º–æ–π, –≤—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ —Å–æ–∑—ã–≤–∞–µ—Ç–µ –≤—Å–µ—Ö –≤ —á–∞—Ç –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–ª—å—à—É—é –Ω–∞–≥—Ä–∞–¥—É\n\n‚Ä¢–ü—É–ø—Å ¬´–ò–Ω—Ç–µ–ª–µ–∫—Ç¬ª\n–° –Ω–∏–º –≤—ã –±—É–¥–µ—Ç–µ –∫–∞–∑–∞—Ç—å—Å—è —É–º–Ω–µ–µ, –∞ –µ—â–µ –≤—Å–µ –∑–Ω–∞—é—Ç –∫–∞–∫–æ–π –≤—ã –±–æ–≥–∞—Ç—ã–π)\n\n\n–£–¥–∞—á–∏ –≤ –ø–æ–∏—Å–∫–∞—Ö)`
        );

        if (ctx.chat.type !== "private") {
          await ctx.replyWithHTML(
            '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—É–ø—Å–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ <a href="https://t.me/PablMefBot">–õ–° –±–æ—Ç–∞</a>',
            {
              reply_to_message_id: ctx.message.message_id,
              disable_web_page_preview: true,
            }
          );
        }
      } catch (error) {
        console.log(error);
        await ctx.reply(
          "–Ø –Ω–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±–µ —Å–µ–∫—Ä–µ—Ç–Ω—É—é –∏–Ω—Ñ—É —Ç–∞–∫ –∫–∞–∫ —Ç—ã –º–µ–Ω—è –∑–∞–±–ª–æ–∫–∞–ª",
          { reply_to_message_id: ctx.message.message_id }
        );
      }
    }

    if (userMessage == "–º–∞–≥–∞–∑–∏–Ω") {
      try {
        await ctx.telegram.sendMessage(
          ctx.from.id,
          "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:",
          Keyboard.inline([
            [
              Key.callback("–¢–æ–≤–∞—Ä—ã —á–∞—Ç–∞", "chatAssortiment"),
              "–£–ª—É—á—à–µ–Ω–∏—è",
              "–í–µ—â–∏",
            ],
            [
              Key.callback("–ó–∞–∫—Ä—ã—Ç—å", "dell"),
              Key.callback("ü§ëDonateLandü§ë", "4"),
            ],
          ])
        );

        if (ctx.chat.type !== "private") {
          await ctx.replyWithHTML(
            '–ú–∞–≥–∞–∑–∏–Ω —É–∂–µ –æ—Ç–∫—Ä—ã—Ç –≤ <a href="https://t.me/PablMefBot">–õ–° –±–æ—Ç–∞</a>',
            {
              reply_to_message_id: ctx.message.message_id,
              disable_web_page_preview: true,
            }
          );
        }
      } catch (e) {
        await ctx.reply("–Ø –Ω–µ —Å–º–æ–≥ –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω —Ç–∞–∫ –∫–∞–∫ —Ç—ã –º–µ–Ω—è –∑–∞–±–ª–æ–∫–∞–ª", {
          reply_to_message_id: ctx.message.message_id,
        });
      }
    }

    if (word1 == "—É–∑–Ω–∞—Ç—å") {
      const id = Number(word3);

      if (!isNaN(id) && word2 == "–∞–π–¥–∏") {
        await checkId(id, ctx);

        return;
      }
    }

    if (
      userMessage == "–º–æ–π –º–µ—Ñ" ||
      userMessage == "–º–µ—Ñ" ||
      userMessage == "–±"
    ) {
      await ctx.reply("–í–∞—à –º–µ—Ñ: " + user.balance + "\n–í–∞—à–∏ –≥–µ–º—ã: " + user.gems);
    }

    if (word1 == "–æ—Ç—Å—ã–ø–∞—Ç—å") {
      await giveCoins(ctx);
    }

    if (userMessage == "–±–æ—Ç") {
      await ctx.reply("‚úÖ–ù–∞ –º–µ—Å—Ç–µ");
    }

    if (userMessage == "–∫–æ–º–∞–Ω–¥—ã") {
      await ctx.reply(commands);
    }

    if (word1 == "–∫—Ä–∞—Ñ—Ç") {
      const id = Number(word2);
      if (!isNaN(id)) {
        await craftService.craftItem(user, id, ctx);
      }
    }

    if (userMessage === capture) {
      let randommef = getRandomInt(500, 1000);

      const hasCalculator = await Item.findOne({
        where: {
          userId: user.id,
          itemName: "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
          isWorn: true,
        },
      });

      if (hasCalculator) {
        randommef *= 3;
      }
      user.captureCounter += 1;

      if (user.captureCounter === 100) {
        const item = await Item.create({
          src: "img/calculator.png",
          itemName: "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
          bodyPart: "right",
          isWorn: false,
          price: 50,
        });

        user.fullSlots++;
        await user.addItem(item);
        await item.save();
        await ctx.reply(
          `‚ÄºÔ∏è–í–ù–ò–ú–ê–ù–ò–ï‚ÄºÔ∏è\n\n@${ctx.from.username} –≤–≤–µ–ª 100 –∫–∞–ø—á–µ–π –∏ –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ–¥–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä[${item.id}]"`
        );
      }

      await resiveLog(user, "–º–µ—Ñ", `${randommef}`, "–≤–≤–æ–¥ –∫–∞–ø—á–∏");
      user.balance += randommef;
      await ctx.reply("–í–µ—Ä–Ω–æ, —Ç—ã –ø–æ–ª—É—á–∏–ª " + randommef + " –º–µ—Ñ–∞", {
        reply_to_message_id: ctx.message.message_id,
      });
      capture = getRandomInt(0, 99999);
    }

    if (word1 == "–∫—É–±") {
      await dice(word3, word2, user, ctx, ctx);
    }

    if (userMessage == "–º–æ–∏ –º–µ—Ñ–∫–µ–π—Å—ã") {
      let result = "–í–∞—à–∏ –º–µ—Ñ–∫–µ–π—Å—ã:\n";
      let i = 1;
      for (const item in cases) {
        result += `${i}) ${cases[item].name} - ${
          user[cases[item].dbName]
        } —à—Ç.\n`;
        i++;
      }
      await ctx.reply(
        result +
          "\nüí∞–î–æ–Ω–∞—Ç –∫–µ–π—Å - " +
          user.donateCase +
          "—à—Çüí∞\n\nüìñ–û—Ç–∫—Ä—ã—Ç—å id\nüìñ–û—Ç–∫—Ä—ã—Ç—å –¥–æ–Ω–∞—Ç\nüìñ–ü–µ—Ä–µ–¥–∞—Ç—å –º–µ—Ñ–∫–µ–π—Å id\nüìñ–ü–µ—Ä–µ–¥–∞—Ç—å –º–µ—Ñ–∫–µ–π—Å –¥–æ–Ω–∞—Ç"
      );
    }

    if (userMessage == "—Ñ–µ—Ä–º–∞" || userMessage == "—Ñ–∞—Ä–º–∞") {
      const checkSub = await checkUserSub(ctx, -1002015930296);

      if (!checkSub) {
        ctx.reply("üìù –î–ª—è —Å–±–æ—Ä–∞ –º–µ—Ñ–∞ –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –∫–∞–Ω–∞–ª @mef_dev");
      } else {
        await userFerma(ctx, user);
      }
    }

    if (word1 == "–±–∞–Ω–¥–∏—Ç") {
      await bandit(word2, user, ctx);
    }

    if (userMessage == "–∫—Ä–∞—Ñ—Ç—ã") {
      craftService.craftList(ctx);
    }

    if (userMessage == "–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å") {
      await getInventory(user, ctx);
    }

    if (word1 == "—É–¥–∞–ª–∏—Ç—å") {
      const id = Number(word3);
      if (!isNaN(id) && word2 == "–≤–µ—â—å") {
        await deleteItem(user, id, ctx);
      }
    }

    if (word1 == "—Å–Ω—è—Ç—å") {
      const id = Number(word2);
      if (!isNaN(id)) {
        await removeItem(user, id, ctx);
      }
    }

    if (word1 == "–ø–µ—Ä–µ–¥–∞—Ç—å") {
      const id = Number(word3);
      const count = isNaN(Number(word4)) ? 1 : word4;

      if (word2 == "–≤–µ—â—å" && !isNaN(id)) {
        await giveItem(user, id, ctx);
        return;
      }

      if (word2 == "–º–µ—Ñ–∫–µ–π—Å" && !isNaN(id)) {
        await giveCase(user, id, count, ctx);
        return;
      }

      if (word2 == "–º–µ—Ñ–∫–µ–π—Å" && word3 === "–¥–æ–Ω–∞—Ç") {
        await giveDonateCase(user, word3, count, ctx);
        return;
      }

      if (word2 == "–≥–µ–º—ã" && !isNaN(id)) {
        await gemsService.giveGems(ctx);
        return;
      }
    }

    if (word1 == "–Ω–∞–¥–µ—Ç—å") {
      const id = Number(word2);
      if (!isNaN(id)) {
        await wearItem(user, id, ctx);
      }
    }

    if (userMessage == "–º–æ–π –ø–∞–±–ª–æ") {
      await getWornItems(user, ctx);
    }

    if (userMessage.includes("–¥–æ–Ω–∞—Ç")) {
      await shopGenerator("4", ctx);
    }

    if (userMessage == "–∏–Ω—Ñ–∞ –º–µ—Ñ–∫–µ–π—Å –¥–æ–Ω–∞—Ç") {
      await ctx.reply(
        "‚ùóÔ∏è–î–æ–Ω–∞—Ç –∫–µ–π—Å‚ùóÔ∏è\n\n–í—ã–ø–∞–¥–∞–µ—Ç –ª—é–±–∞—è —Å–ª—É—á–∞–π–Ω–∞—è –≤–µ—â—å, –æ—Ç –æ–±—ã—á–Ω—ã—Ö –¥–æ –¥–æ–Ω–∞—Ç–Ω—ã—Ö"
      );
    }

    if (word1 == "–∫—É–ø–∏—Ç—å") {
      const id = Number(word3);
      const count = Number(word4);
      const itemInfo = clothes[id];

      if (word2 == "–º–µ—Ñ–∫–µ–π—Å" && !isNaN(id)) {
        await buyCase(user, id, count, ctx);
      }

      if (word2 == "–≤–µ—â—å" && itemInfo && !isNaN(id)) {
        await buyItem(user, itemInfo, ctx, true);
      } else if (word2 == "–≤–µ—â—å") {
        await ctx.reply("–¢–∞–∫–æ–π –≤–µ—â–∏ –Ω–µ—Ç");
      }
    }

    if (word1 == "–∏–Ω—Ñ–æ" || word1 == "–∏–Ω—Ñ–∞") {
      const id = Number(word2);
      if (!isNaN(id)) {
        getItemInfo(id, ctx);
      }

      if (word2 == "–º–µ—Ñ–∫–µ–π—Å" && !isNaN(Number(word3))) {
        getCaseInfo(Number(word3), ctx);
      }
    }

    await user.save();
  } catch (e) {
    await ctx.reply("–ö–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞, " + e);
  }
  return next();
});

function CaptureGenerator(bot) {
  const job = new CronJob(
    "0 5 */2 * * *",
    async function () {
      try {
        capture = generateCapcha();
        await bot.telegram.sendMessage(
          process.env.CHAT_ID,
          "–ú–µ—Ñ–ö–∞–ø—á–∞ " + capture
        );
      } catch (error) {
        console.log(error);
      }
    },
    null,
    true, // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ `false`, —á—Ç–æ–±—ã –∑–∞–¥–∞—á–∞ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª–∞—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    "Europe/Moscow"
  );
}

module.exports = { chatCommands, CaptureGenerator };
