const { Composer } = require("telegraf");
const CronJob = require("cron").CronJob;
require("dotenv").config({
  path: process.env.NODE_ENV === "production" ? ".env.prod" : ".env.dev",
});

const {
  getRandomInt,
  generateCapcha,
  notify,
  checkUserSub,
  checkUserProfile,
} = require("../utils/helpers");
const { dice, bandit, userFerma, createRP } = require("../utils/games.js");
const { getUser } = require("../db/functions.js");
const { giveCoins, giveItem, giveCase } = require("./giveScripts.js");
const clothes = require("../itemsObjects.js/clothes");
const {
  getInventory,
  deleteItem,
  removeItem,
  wearItem,
  getWornItems,
  buyItem,
  getItemInfo,
} = require("../itemsModule/clothesFunctions");
const { buyCase } = require("../itemsModule/casesFunctions");
const { resiveLog } = require("../logs/globalLogs");
const { Item } = require("../db/models");

const chatCommands = new Composer();
const commands = "https://telegra.ph/RUKOVODSTVO-PO-BOTU-05-13";
let capture = 120394857653;

const triggers = [
  "–º–µ—Ñ",
  "–±–æ—Ç",
  "–ø—Ä–æ—Ñ",
  "–∫–æ–º–∞–Ω–¥—ã",
  "–º–æ–π –º–µ—Ñ",
  "–±",
  "–∫—É–±",
  "–±–∞–Ω–¥–∏—Ç",
  "—Ñ–µ—Ä–º–∞",
  "—Ñ–∞—Ä–º–∞",
  "–∞–∫—Ç–∏–≤",
  "–æ—Ç—Å—ã–ø–∞—Ç—å",
  "–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å",
  "—É–¥–∞–ª–∏—Ç—å",
  "—Å–Ω—è—Ç—å",
  "–ø–µ—Ä–µ–¥–∞—Ç—å",
  "–∫—É–ø–∏—Ç—å",
  "–Ω–∞–¥–µ—Ç—å",
  "–º–æ–π –ø–∞–±–ª–æ",
  "–∫—É—Ä—Å",
  "–∏–Ω—Ñ–æ",
];

const rp = {
  –∫–∏–Ω—É—Ç—å: { value: "–∫–∏–Ω—É–ª(–∞) –Ω–∞–ø—Ä–æ–≥–∏–±", emoji: "ü´Ç" },
  –¥–æ–∑–∞: { value: "–≤–∫–æ–ª–æ–ª(–∞) –¥–æ–∑—É", emoji: "üíâ" },
  —Å–µ–∫—Å: { value: "—Ç—Ä–∞—Ö–Ω—É–ª(–∞) –∏ –∫–æ–Ω—á–∏–ª(–∞) –≤–Ω—É—Ç—Ä—å", emoji: "üîû" },
  —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å: { value: "—É–Ω–∏—á—Ç–æ–∂–∏–ª(–∞)", emoji: "üíÄ" },
  –Ω—é—Ö–∞—Ç—å: { value: "–∑–∞–Ω—é—Ö–Ω—É–ª(–∞) –º–µ—Ñ–∞ –≤–º–µ—Å—Ç–µ —Å", emoji: "üåø" },
  –Ω–∞–∫–æ—Ä–º–∏—Ç—å: { value: "–≤–∫—É—Å–Ω–æ –Ω–∞–∫–æ—Ä–º–∏–ª(–∞)", emoji: "üë®‚Äçüç≥" },
  –æ—Ç—à–ª–µ–ø–∞—Ç—å: { value: "—Å–º–∞—á–Ω–æ –æ—Ç—à–ª–µ–ø–∞–ª(–∞)", emoji: "üîû" },
  –±—É–º: { value: "–≤–∑–æ—Ä–≤–∞–ª(–∞)", emoji: "üí•" },
  –∫–æ–Ω—á–∏—Ç—å: { value: "–∫–æ–Ω—á–∏–ª(–∞) –Ω–∞ –ª–∏—Ü–æ", emoji: "üí¶" },
  –≤—ã–ª–µ—á–∏—Ç—å: { value: "—Å–¥–µ–ª–∞–ª(–∞) —É–∫–æ–ª –≤ –ø–æ–ø—É –∏ –≤—ã–ª–µ—á–∏–ª(–∞)", emoji: "üíâ" },
};

chatCommands.on("text", async (ctx, next) => {
  const user = await getUser(
    ctx.from.id,
    ctx.from.first_name,
    ctx.from.username
  );
  const userMessage = ctx.message.text.toLowerCase();
  const [word1, word2, word3, word4] = userMessage.split(" ");
  const replyToMessage = ctx.message.reply_to_message;
  const checkStatus = await checkUserSub(
    ctx,
    "@healthy_food_music",
    word1,
    userMessage,
    triggers,
    ctx
  );

  if (replyToMessage && replyToMessage.from) {
    const comment = userMessage.split("\n")[1];
    const rpAction = rp[userMessage.split("\n")[0]];
    if (rpAction) {
      await createRP(
        rpAction.value,
        rpAction.emoji,
        ctx,
        replyToMessage,
        comment
      );
    }
  }

  try {
    if (checkStatus || userMessage === capture) {
      if (userMessage == "–ø—Ä–æ—Ñ") {
        await checkUserProfile(user, ctx);
      }

      if (
        userMessage == "–º–æ–π –º–µ—Ñ" ||
        userMessage == "–º–µ—Ñ" ||
        userMessage == "–±"
      ) {
        ctx.reply("–í–∞—à –º–µ—Ñ: " + user.balance);
      }

      if (word1 == "–æ—Ç—Å—ã–ø–∞—Ç—å") {
        await giveCoins(ctx);
      }

      if (userMessage == "–±–æ—Ç") {
        ctx.reply("‚úÖ–ù–∞ –º–µ—Å—Ç–µ");
      }

      if (userMessage == "–∫–æ–º–∞–Ω–¥—ã") {
        ctx.reply(commands);
      }

      if (userMessage === capture) {
        let randommef = getRandomInt(500, 1000);

        const hasCalculator = await Item.findOne({
          where: {
            userId: user.id,
            itemName: "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
            isWorn: true,
          },
        });

        if (hasCalculator) {
          randommef *= 3;
        }

        await resiveLog(user, "–º–µ—Ñ", `${randommef}`, "–≤–≤–æ–¥ –∫–∞–ø—á–∏");
        user.captureCounter += 1;
        user.balance += randommef;
        await ctx.reply("–í–µ—Ä–Ω–æ, —Ç—ã –ø–æ–ª—É—á–∏–ª " + randommef + " –º–µ—Ñ–∞", {
          reply_to_message_id: ctx.message.message_id,
        });
        capture = 342234242;
      }

      if (word1 == "–∫—É–±") {
        await dice(word3, word2, user, ctx, ctx);
      }

      if (userMessage == "—Ñ–µ—Ä–º–∞" || userMessage == "—Ñ–∞—Ä–º–∞") {
        await userFerma(ctx, user);
      }

      if (word1 == "–±–∞–Ω–¥–∏—Ç") {
        await bandit(word2, user, ctx);
      }

      if (userMessage == "–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å") {
        await getInventory(user, ctx);
      }

      if (word1 == "—É–¥–∞–ª–∏—Ç—å") {
        const id = Number(word3);
        if (!isNaN(id) && word2 == "–≤–µ—â—å") {
          await deleteItem(user, id, ctx);
        }
      }

      if (word1 == "—Å–Ω—è—Ç—å") {
        const id = Number(word2);
        if (!isNaN(id)) {
          await removeItem(user, id, ctx);
        }
      }

      if (word1 == "–ø–µ—Ä–µ–¥–∞—Ç—å") {
        const id = Number(word3);
        const count = isNaN(Number(word4)) ? 1 : word4;
        if (word2 == "–≤–µ—â—å" && !isNaN(id)) {
          await giveItem(user, id, ctx);
        }

        if (word2 == "–º–µ—Ñ–∫–µ–π—Å" && !isNaN(id)) {
          await giveCase(user, id, count, ctx);
        }
      }

      if (word1 == "–Ω–∞–¥–µ—Ç—å") {
        const id = Number(word2);
        if (!isNaN(id)) {
          await wearItem(user, id, ctx);
        }
      }

      if (userMessage == "–º–æ–π –ø–∞–±–ª–æ") {
        await getWornItems(user, ctx);
      }

      if (userMessage == "–∫—É—Ä—Å") {
        ctx.reply(
          "ü§ë–ê–∫—Ç–∏–≤–Ω—ã–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ü§ë\n\n1 –±–∫–æ–∏–Ω - 5 –º–µ—Ñ–∞\n2 —Ä–¥–Ω–æ - 1 –º–µ—Ñ\n1 –∏—Ä–∏—Å–∫–∞ - 500 –º–µ—Ñ–∞\n1 —Ä—É–±–ª—å - 1000 –º–µ—Ñ–∞\n\n–ú–µ–Ω—è—Ç—å –º–æ–∂–Ω–æ —É @ralf303"
        );
      }

      if (word1 == "–∫—É–ø–∏—Ç—å") {
        const id = Number(word3);
        const count = Number(word4);
        const itemInfo = clothes[id];

        if (word2 == "–º–µ—Ñ–∫–µ–π—Å" && !isNaN(id)) {
          await buyCase(user, id, count, ctx);
        }

        if (word2 == "–≤–µ—â—å" && itemInfo && !isNaN(id)) {
          await buyItem(user, itemInfo, ctx, true);
        } else if (word2 == "–≤–µ—â—å") {
          ctx.reply("–¢–∞–∫–æ–π –≤–µ—â–∏ –Ω–µ—Ç");
        }
      }

      if (word1 == "–∏–Ω—Ñ–∞") {
        const id = Number(word2);
        if (!isNaN(id)) {
          getItemInfo(id, ctx);
        }
      }

      await user.save();
    } else if (triggers.includes(userMessage) || triggers.includes(word1)) {
      notify(ctx, "healthy_food_music");
    }
  } catch (e) {
    ctx.reply("–ö–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞, " + e);
  }
  return next();
});

function CaptureGenerator(bot) {
  new CronJob(
    "30 * * * * *",
    async function () {
      try {
        capture = generateCapcha();
        await bot.telegram.sendMessage(
          process.env.CHAT_ID,
          "–ú–µ—Ñ–ö–∞–ø—á–∞ " + capture
        );
      } catch (error) {
        console.log(error);
      }
    },
    null,
    true,
    "Europe/Moscow"
  );
}

module.exports = { chatCommands, CaptureGenerator };
