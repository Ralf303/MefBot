const { Keyboard, Key } = require("telegram-keyboard");
const { Composer } = require("telegraf");
const { getUser } = require("../db/functions.js");
const { Item } = require("../db/models.js");
const bonusService = require("../services/bonus-service.js");

const command = new Composer();
const commands = "https://telegra.ph/RUKOVODSTVO-PO-BOTU-05-13";

command.start(async (ctx) => {
  try {
    if (ctx.startPayload) {
      const value = ctx.startPayload;
      const { id, first_name, username } = ctx.from;
      const user = await getUser(id, first_name, username);

      if (/^\d+$/.test(value)) {
        bonusService.takeBonus(user, ctx, value);
      }

      if (value === "sith") {
        bonusService.sith(user, ctx);
      }

      if (value === "jeday") {
        bonusService.jeday(user, ctx);
      }
      ctx.reply(value);
    } else {
      await ctx.reply(
        "–ü—Ä–∏–≤–µ—Ç " +
          ctx.from.first_name +
          "!\n\n–Ø, –ú–µ—Ñ–ë–æ—Ç, —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–º–æ—â–∏ –≤ —á–∞—Ç–µ @mefpablo\n–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ => /help"
      );
    }
  } catch (error) {
    console.log(error);
  }
});

command.command("command", async (ctx) => {
  try {
    await ctx.reply(commands);
  } catch (error) {
    console.log(error);
  }
});

command.command("help", async (ctx) => {
  try {
    await ctx.replyWithHTML(
      "–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n/command –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞\n/start –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/shop –º–∞–≥–∞–∑–∏–Ω\n\n–¢–∞–∫–∂–µ –µ—Å–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –æ—à–∏–±–∫—É –ø–∏—à–∏—Ç–µ @ralf303"
    );
  } catch (error) {
    console.log(error);
  }
});

command.command("shop", async (ctx) => {
  try {
    if (ctx.chat.type === "private") {
      await ctx.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:",
        Keyboard.inline([
          [Key.callback("–¢–æ–≤–∞—Ä—ã —á–∞—Ç–∞", "chatAssortiment"), "–£–ª—É—á—à–µ–Ω–∏—è", "–í–µ—â–∏"],
          [
            Key.callback("–ó–∞–∫—Ä—ã—Ç—å", "dell"),
            Key.callback("ü§ëDonateLandü§ë", "4"),
          ],
        ])
      );
    } else {
      await ctx.reply("–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª—Å");
    }
  } catch (error) {
    console.log(error);
  }
});

command.command("change", async (ctx) => {
  try {
    const user = await getUser(
      ctx.from.id,
      ctx.from.first_name,
      ctx.from.username
    );

    const isItem = await Item.findAll({
      where: {
        userId: user.id,
        itemName: "–®–∞–π–ª—É—à–∞–π",
      },
    });

    if (isItem.length === 0) {
      await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç —à–∞–π–ª—É—à–∞—èü•≤");
      return;
    }

    isItem.forEach(async (item) => {
      if (item.src === "img/white_shalusha.png") {
        item.src = "img/black_shalusha.png";
      } else if (item.src === "img/black_shalusha.png") {
        item.src = "img/white_shalusha.png";
      }
      await item.save();
    });

    ctx.reply("–®–∞–π–ª—É—à–∞–π –∏–∑–º–µ–Ω–µ–Ω");
  } catch (error) {
    console.log(error);
  }
});

module.exports = command;
