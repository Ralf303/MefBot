const { getUserCase } = require("../db/functions");
const { User, Item } = require("../db/models");
const cases = require("../itemsObjects/cases");
const { giveResoursesLog, loseLog } = require("../logs/globalLogs");

const giveCoins = async (ctx) => {
  const chatId = ctx.from.id;
  const message = ctx.message.reply_to_message;

  if (!message) {
    return;
  }

  const receiverChatId = message.from.id;
  const amount = parseInt(ctx.message.text.split(" ")[1]);

  if (isNaN(amount) || amount <= 0) {
    return;
  }

  // –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–º
  if (message.from.is_bot) {
    await ctx.reply("–ó–∞—á–µ–º –±–æ—Ç—É –º–µ—Ñüßê");
    return;
  }

  try {
    const sender = await User.findOne({ where: { chatId } });
    let receiver = await User.findOne({
      where: { chatId: receiverChatId },
    });

    if (sender.balance < amount) {
      await ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Ñ–∞ü•≤");
      return;
    }

    if (sender.id === receiver.id) {
      await ctx.reply(`–ò–¥–∏ –Ω–∞—Ö—É–π, —Ç–∞–∫ –Ω–µ–ª—å–∑—èüñï`);
      return;
    }

    if (amount < 100) {
      await ctx.reply("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–¥–∞—á–∏ 100 –≥—Ä–∞–º–º");
      return;
    }

    sender.balance -= amount;
    receiver.balance += amount;
    await sender.save();
    await receiver.save();
    await ctx.reply(
      `–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å—ã–ø–∞–ª–∏ ${amount} –≥—Ä–∞–º–º –º–µ—Ñ–∞ ${message.from.first_name}`
    );

    await loseLog(sender, "–º–µ—Ñ", "–ø–µ—Ä–µ–¥–∞—á–∞ –¥—Ä—É–≥–æ–º—É —é–∑–µ—Ä—É");
    await giveResoursesLog(sender, receiver, "–º–µ—Ñ", amount);
  } catch (error) {
    console.log(error);
    await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏.");
  }
};

const giveItem = async (sender, id, ctx) => {
  try {
    const message = ctx.message.reply_to_message;

    if (!message) {
      return;
    }

    const receiverChatId = message.from.id;

    // –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–º
    if (message.from.is_bot) {
      await ctx.reply("–ó–∞—á–µ–º –±–æ—Ç—É –ø—Ä–µ–¥–º–µ—Ç—ãüßê");
      return;
    }

    const receiver = await User.findOne({
      where: { chatId: receiverChatId },
    });

    const item = await Item.findOne({
      where: {
        id: id,
        userId: sender.id,
      },
    });

    if (!item) {
      await ctx.reply(`–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–π –≤–µ—â–∏üò•`);
      return;
    }

    if (receiver.slots <= receiver.fullSlots) {
      await ctx.reply(`–£ ${receiver.firstname} –Ω–µ—Ç –º–µ—Å—Ç–∞üò•`);
      return;
    }

    if (item.isWorn) {
      item.isWorn = false;
    }

    if (sender.id === receiver.id) {
      await ctx.reply(`–ò–¥–∏ –Ω–∞—Ö—É–π, —Ç–∞–∫ –Ω–µ–ª—å–∑—èüñï`);
      return;
    }
    sender.fullSlots--;
    receiver.fullSlots++;
    item.userId = receiver.id;
    await ctx.reply(
      `–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–ª–∏ ${item.itemName}[${item.id}] @${receiver.username}`
    );

    await sender.save();
    await receiver.save();
    await item.save();
    await loseLog(
      sender,
      `${item.itemName}[${item.id}]`,
      "–ø–µ—Ä–µ–¥–∞—á–∞ –¥—Ä—É–≥–æ–º—É —é–∑–µ—Ä—É"
    );
    await giveResoursesLog(
      sender,
      receiver,
      `${item.itemName}[${item.id}]`,
      "1"
    );
  } catch (error) {
    console.log(error);
  }
};

const giveCase = async (sender, id, count, ctx) => {
  try {
    const message = ctx.message.reply_to_message;
    const intCount = parseInt(count);
    if (!message) {
      return;
    }

    const receiverChatId = message.from.id;

    // –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–º
    if (message.from.is_bot) {
      await ctx.reply("–ó–∞—á–µ–º –±–æ—Ç—É –∫–µ–π—Å—ãüßê");
      return;
    }

    const receiver = await User.findOne({
      where: { chatId: receiverChatId },
    });

    const receiverCase = await getUserCase(receiver.id);
    const senderCase = await getUserCase(sender.id);
    const needCase = cases[id];

    if (!needCase) {
      await ctx.reply("–¢–∞–∫–æ–≥–æ –∫–µ–π—Å–∞ –Ω–µ—Çüò•");
      return;
    }

    const caseCount = senderCase[needCase.dbName];

    if (intCount > caseCount) {
      await ctx.reply(`–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ${needCase.name}üì¶`);
      return;
    }

    if (sender.id === receiver.id) {
      await ctx.reply(`–ò–¥–∏ –Ω–∞—Ö—É–π, —Ç–∞–∫ –Ω–µ–ª—å–∑—èüñï`);
      return;
    }

    senderCase[needCase.dbName] -= intCount;
    receiverCase[needCase.dbName] += intCount;

    await ctx.reply(
      `–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–ª–∏ ${intCount} ${needCase.name}[${id}] @${receiver.username}`
    );

    await senderCase.save();
    await receiverCase.save();
    await loseLog(sender, `${needCase.name}[${id}]`, "–ø–µ—Ä–µ–¥–∞—á–∞ –¥—Ä—É–≥–æ–º—É —é–∑–µ—Ä—É");
    await giveResoursesLog(
      sender,
      receiver,
      `${needCase.name}[${id}]`,
      `${count}`
    );
  } catch (error) {
    console.log(error);
  }
};

const giveDonateCase = async (sender, id, count, ctx) => {
  try {
    const message = ctx.message.reply_to_message;
    const senderCase = await getUserCase(sender.id);
    if (!message) {
      return;
    }

    const receiverChatId = message.from.id;

    // –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–º
    if (message.from.is_bot) {
      await ctx.reply("–ó–∞—á–µ–º –±–æ—Ç—É –∫–µ–π—Å—ãüßê");
      return;
    }

    const receiver = await User.findOne({
      where: { chatId: receiverChatId },
    });
    const receiverCase = await getUserCase(receiver.id);
    const needCase = id;

    if (needCase !== "–¥–æ–Ω–∞—Ç") {
      await ctx.reply("–¢–∞–∫–æ–≥–æ –∫–µ–π—Å–∞ –Ω–µ—Çüò•");
      return;
    }

    if (count > senderCase.donate) {
      await ctx.reply(`–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–µ–π—Å–æ–≤ –¥–æ–Ω–∞—Ç –∫–µ–π—Å–æ–≤üì¶`);
      return;
    }

    if (sender.id === receiver.id) {
      await ctx.reply(`–ò–¥–∏ –Ω–∞—Ö—É–π, —Ç–∞–∫ –Ω–µ–ª—å–∑—èüñï`);
      return;
    }

    senderCase.donate -= count;
    receiverCase.donate += count;

    await ctx.reply(
      `–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–ª–∏ ${count} –¥–æ–Ω–∞—Ç–∫–µ–π—Å–æ–≤ @${receiver.username}`
    );

    await senderCase.save();
    await receiverCase.save();
    await loseLog(sender, `–¥–æ–Ω–∞—Ç –∫–µ–π—Å`, "–ø–µ—Ä–µ–¥–∞—á–∞ –¥—Ä—É–≥–æ–º—É —é–∑–µ—Ä—É");
    await giveResoursesLog(sender, receiver, `–¥–æ–Ω–∞—Ç –∫–µ–π—Å`, `${count}`);
  } catch (error) {
    console.log(error);
  }
};

module.exports = {
  giveCoins,
  giveItem,
  giveCase,
  giveDonateCase,
};
