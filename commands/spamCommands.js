const { Composer } = require("telegraf");
const { openCase, openDonateCase } = require("../itemsModule/casesFunctions");
const cases = require("../itemsObjects/cases");
const { getUser } = require("../db/functions");

const spamCommands = new Composer();

spamTriggers = ["–æ—Ç–∫—Ä—ã—Ç—å", "–º–µ—Ñ–∫–µ–π—Å—ã"];

spamCommands.on("text", async (ctx, next) => {
  const user = await getUser(
    ctx.from.id,
    ctx.from.first_name,
    ctx.from.username
  );
  const userMessage = ctx.message.text.toLowerCase();
  const [word1, word2] = userMessage.split(" ");
  const IsSpam =
    ctx.chat.id === -1001672482562 || ctx.chat.id === -1001680708708;
  const IsPrivate = ctx.chat.type === "private";
  try {
    if (IsSpam || IsPrivate) {
      if (word1 == "–æ—Ç–∫—Ä—ã—Ç—å") {
        const id = Number(word2);

        if (word2 === "–¥–æ–Ω–∞—Ç") {
          await openDonateCase(user, ctx);
          return;
        }

        if (!isNaN(id)) {
          await openCase(user, id, ctx);
          return;
        } else if (word1 == "–æ—Ç–∫—Ä—ã—Ç—å") {
          await ctx.reply(
            "–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ\n<<–û—Ç–∫—Ä—ã—Ç—å Id>>"
          );
        }
      }

      if (userMessage == "–º–µ—Ñ–∫–µ–π—Å—ã") {
        let result = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–µ–π—Å—ã:\n";
        let i = 1;
        for (const item in cases) {
          let price = cases[item].price;
          if (cases[item].class) {
            price += ` –≥–µ–º–æ–≤`;
          } else {
            price += ` MF`;
          }
          result += `${i}) ${cases[item].name} –¶–µ–Ω–∞: ${price}\n`;
          i++;
        }
        await ctx.reply(result + "\nüìñ–ö—É–ø–∏—Ç—å –º–µ—Ñ–∫–µ–π—Å id\nüìñ–ò–Ω—Ñ–∞ –º–µ—Ñ–∫–µ–π—Å id");
      }
    } else if (
      (spamTriggers.includes(userMessage) || spamTriggers.includes(word1)) &&
      !IsSpam
    ) {
      await ctx.reply("–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ @mefanarhia –∏–ª–∏ –≤ –ª—Å");
    }
  } catch (e) {
    await ctx.reply("–ö–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞, " + e);
  }
  return next();
});

module.exports = spamCommands;
