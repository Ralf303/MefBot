const { Keyboard, Key } = require("telegram-keyboard");
require("dotenv").config({
  path: process.env.NODE_ENV === "production" ? ".env.prod" : ".env.dev",
});
const { User, Bonus, Item } = require("../db/models");
const { getRandomInt } = require("../utils/helpers");
const clothes = require("../itemsObjects/clothes");

class BonusService {
  #chatId = -1002015930296;

  async #createBonusInDb() {
    try {
      const now = Math.floor(Date.now() / 1000);
      const bonus = await Bonus.create({
        time: now,
      });

      return bonus;
    } catch (error) {
      return false;
    }
  }

  async sith(user, ctx) {
    const itemInfo = clothes[93];

    if (user.slots < user.fullSlots) {
      await ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ—Ç–æ–≤üò•");
      return;
    }

    const item = await Item.create({
      src: itemInfo.src,
      itemName: itemInfo.name,
      bodyPart: itemInfo.bodyPart,
      isWorn: false,
      price: itemInfo.price,
    });

    user.fullSlots++;
    await user.addItem(item);
    await user.save();
    await item.save();
    await ctx.replyWithHTML(
      `–¢—ã –≤—ã–±—Ä–∞–ª –≤–µ—Ä–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É, —Ç–µ–º–Ω–∞—è —Å–∏–ª–∞ –∑–∞—Ö–≤–∞—Ç–∏—Ç –≤—Å–µüòà\n\nüìñ<code>–ù–∞–¥–µ—Ç—å ${item.id}</code>`
    );
  }

  async jeday(user, ctx) {
    const itemInfo = clothes[94];

    if (user.slots < user.fullSlots) {
      await ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ—Ç–æ–≤üò•");
      return;
    }

    const item = await Item.create({
      src: itemInfo.src,
      itemName: itemInfo.name,
      bodyPart: itemInfo.bodyPart,
      isWorn: false,
      price: itemInfo.price,
    });

    user.fullSlots++;
    await user.addItem(item);
    await user.save();
    await item.save();
    await ctx.replyWithHTML(
      `–î–∞ –ø—Ä–∏–±—É–¥–µ—Ç —Å —Ç–æ–±–æ–π —Å–∏–ª–∞, —é–Ω—ã–π –¥–∂–µ–¥–∞–πüí™\n\nüìñ<code>–ù–∞–¥–µ—Ç—å ${item.id}</code>`
    );
  }

  async droch(ctx) {
    if (ctx.channelPost.chat.id !== this.#chatId) {
      await ctx.telegram.sendMessage(ctx.channelPost.chat.id, "–ò–î–ò –ù–ê–•–£–ô");
      return;
    }

    await ctx.telegram.deleteMessage(this.#chatId, ctx.channelPost.message_id);

    await ctx.telegram.sendMessage(
      this.#chatId,
      "‚ùóÔ∏è–ù–ï–î–†–û–ß–ê–ë–†–¨‚ùóÔ∏è\n\n–í—ã–±–∏—Ä–∞–π –Ω–∞ —á—å–µ–π —Å—Ç–æ—Ä–æ–Ω–µ —Ç—ã –±—É–¥–µ—à—å",
      Keyboard.inline([
        Key.url("üí™–î–∂–µ–¥–∞–π", `${process.env.BOT_URL}?start=jeday`),
        Key.url("ü•µ–°–∏—Ç—Ö", `${process.env.BOT_URL}?start=sith`),
      ])
    );
  }

  async createBonus(ctx) {
    if (ctx.channelPost.chat.id !== this.#chatId) {
      await ctx.telegram.sendMessage(ctx.channelPost.chat.id, "–ò–î–ò –ù–ê–•–£–ô");
      return;
    }

    await ctx.telegram.deleteMessage(this.#chatId, ctx.channelPost.message_id);

    const bonus = await this.#createBonusInDb();

    if (!bonus) {
      await ctx.telegram.sendMessage(
        this.#chatId,
        "–û–®–ò–ë–ö–ê –ü–†–ò –°–û–ó–î–ê–ù–ò–ò –ë–û–ù–£–°–ê"
      );
      return;
    }

    await User.update({ takeBonus: 0 }, { where: {} });

    await ctx.telegram.sendMessage(
      this.#chatId,
      "‚ùóÔ∏è–ú–ï–§–ë–û–ù–£–°‚ùóÔ∏è\n\n–£—Å–ø–µ–π –∑–∞–±—Ä–∞—Ç—å –≤ –ø–µ—Ä–≤—ã–π —á–∞—Å –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –ø–æ—Å—Ç–∞!",
      Keyboard.inline([
        Key.url("üéÅ–ó–∞–±—Ä–∞—Ç—å", `${process.env.BOT_URL}?start=${bonus.id}`),
      ])
    );
  }

  async takeBonus(user, ctx, bonusId) {
    try {
      const bonus = await Bonus.findOne({ where: { id: bonusId } });

      if (!bonus) {
        return ctx.reply("–ø–æ–∑–¥–Ω–æ...");
      }

      if (user.takeBonus > 0) {
        return ctx.reply("–í—ã —É–∂–µ –±—Ä–∞–ª–∏ –±–æ–Ω—É—Å");
      }

      const now = Math.floor(Date.now() / 1000);
      const lastTime = bonus.time;
      const diff = now - lastTime;

      if (diff > 3600) {
        await bonus.destroy();
        return ctx.reply("–ø–æ–∑–¥–Ω–æ...");
      }

      const prize = getRandomInt(1000, 10000);
      user.takeBonus++;
      user.balance += prize;
      await user.save();
      await ctx.reply(`–ë–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ ${prize}MF —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω`);
    } catch (e) {
      console.log(e);
    }
  }
}

module.exports = new BonusService();
