const { Keyboard, Key } = require("telegram-keyboard");
require("dotenv").config({
  path: process.env.NODE_ENV === "production" ? ".env.prod" : ".env.dev",
});
const { User, Bonus, Item } = require("../db/models");
const { getRandomInt } = require("../utils/helpers");
const clothes = require("../itemsObjects/clothes");
const { blendImages, checkItem } = require("../itemsModule/clothesFunctions");

class BonusService {
  #chatId = Number(process.env.CHANNEL_ID);

  async #createBonusInDb() {
    try {
      const now = Math.floor(Date.now() / 1000);
      const bonus = await Bonus.create({
        time: now,
      });

      return bonus;
    } catch (error) {
      return false;
    }
  }

  async giveItem(user, ctx, id) {
    const itemInfo = clothes[id];

    if (user.slots < user.fullSlots) {
      await ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ—Ç–æ–≤üò•");
      return;
    }

    if (user.takeBonus >= 2) {
      await ctx.reply("–í—ã —É–∂–µ —É—á–∞–≤—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ —Ä–∞–∑–¥–∞—á–µ");
      return;
    }

    const item = await Item.create({
      src: itemInfo.src,
      itemName: itemInfo.name,
      bodyPart: itemInfo.bodyPart,
      isWorn: false,
      price: itemInfo.price,
    });

    let prize = getRandomInt(1000, 10000);

    const pupsItem = await checkItem(user.id, "–ü—É–ø—Å ¬´–£–¥–∞—á–∞¬ª");

    if (pupsItem) {
      prize += 500;
    }

    user.takeBonus += 2;
    user.balance += prize;
    user.fullSlots++;
    await user.addItem(item);
    await user.save();
    await item.save();
    await ctx.replyWithHTML(
      `–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–∞–∑–¥–∞—á–µ)\n\n–í—ã –ø–æ–ª—É—á–∏–ª–∏:\n‚Ä¢${itemInfo.name}\n‚Ä¢${prize} –º–µ—Ñ–∞\n\nüìñ<code>–ù–∞–¥–µ—Ç—å ${item.id}</code>`
    );
  }

  async sendEvent(ctx, id) {
    if (ctx.channelPost.chat.id !== this.#chatId) {
      await ctx.telegram.sendMessage(ctx.channelPost.chat.id, "–ò–î–ò –ù–ê–•–£–ô");
      return;
    }

    if (!id) {
      await ctx.telegram.sendMessage(ctx.channelPost.chat.id, "–ù–µ —É–∫–∞–∑–∞–Ω –∞–π–¥–∏");
      return;
    }
    const itemInfo = clothes[id];

    if (!itemInfo) {
      await ctx.telegram.sendMessage(ctx.channelPost.chat.id, "–¢–∞–∫–æ–π –≤–µ—â–∏ –Ω–µ—Ç");
      return;
    }
    await ctx.telegram.deleteMessage(this.#chatId, ctx.channelPost.message_id);
    await User.update({ takeBonus: 0 }, { where: {} });
    const keyboard = {
      inline_keyboard: [
        [
          {
            text: "‚ùóÔ∏è–£–ß–ê–°–¢–í–£–Æ‚ùóÔ∏è",
            url: `${process.env.BOT_URL}?start=event_${id}`,
          },
        ],
      ],
    };

    await ctx.telegram.sendPhoto(
      this.#chatId,
      { source: await blendImages([itemInfo.src]) },
      {
        caption: `‚ùóÔ∏è–†–ê–ó–î–ê–ß–ê‚ùóÔ∏è\n\n–£—Å–ª–æ–≤–∏—è:\n‚Ä¢–ë—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã–º –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª\n‚Ä¢–ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—Éüëá\n\n–¢–æ—Ç –∫—Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç —É—Å–ª–æ–≤–∏–µ –ø–æ–ª—É—á–∏—Ç:\n‚Ä¢${itemInfo.name}\n‚Ä¢–ù–µ–º–Ω–æ–≥–æ –º–µ—Ñ–∞\n\nüëá–°–∫–æ—Ä–µ–µ —É—á–∞—Å—Ç–≤—É–πüëá`,
        reply_markup: keyboard,
      }
    );
  }

  async createBonus(ctx) {
    if (ctx.channelPost.chat.id !== this.#chatId) {
      await ctx.telegram.sendMessage(ctx.channelPost.chat.id, "–ò–î–ò –ù–ê–•–£–ô");
      return;
    }

    await ctx.telegram.deleteMessage(this.#chatId, ctx.channelPost.message_id);

    const bonus = await this.#createBonusInDb();

    if (!bonus) {
      await ctx.telegram.sendMessage(
        this.#chatId,
        "–û–®–ò–ë–ö–ê –ü–†–ò –°–û–ó–î–ê–ù–ò–ò –ë–û–ù–£–°–ê"
      );
      return;
    }

    await User.update({ takeBonus: 0 }, { where: {} });

    await ctx.telegram.sendMessage(
      this.#chatId,
      "‚ùóÔ∏è–ú–ï–§–ë–û–ù–£–°‚ùóÔ∏è\n\n–£—Å–ø–µ–π –∑–∞–±—Ä–∞—Ç—å –≤ –ø–µ—Ä–≤—ã–π —á–∞—Å –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –ø–æ—Å—Ç–∞!",
      Keyboard.inline([
        Key.url("üéÅ–ó–∞–±—Ä–∞—Ç—å", `${process.env.BOT_URL}?start=${bonus.id}`),
      ])
    );
  }

  async takeBonus(user, ctx, bonusId) {
    try {
      const bonus = await Bonus.findOne({ where: { id: bonusId } });

      if (!bonus) {
        return ctx.reply("–ø–æ–∑–¥–Ω–æ...");
      }

      if (user.takeBonus > 0) {
        return ctx.reply("–í—ã —É–∂–µ –±—Ä–∞–ª–∏ –±–æ–Ω—É—Å");
      }

      const now = Math.floor(Date.now() / 1000);
      const lastTime = bonus.time;
      const diff = now - lastTime;

      if (diff > 3600) {
        await bonus.destroy();
        return ctx.reply("–ø–æ–∑–¥–Ω–æ...");
      }

      let prize = getRandomInt(1000, 10000);

      const pupsItem = await Item.findOne({
        where: {
          userId: user.id,
          itemName: "",
          isWorn: true,
        },
      });

      if (pupsItem) {
        prize += 500;
      }

      user.takeBonus++;
      user.balance += prize;
      await user.save();
      await ctx.reply(`–ë–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ ${prize}MF —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω`);
    } catch (e) {
      console.log(e);
    }
  }
}

module.exports = new BonusService();
