const { Scenes } = require("telegraf");
const { getUser } = require("./db/functions");
const { getWinAmount, getWinColor } = require("./utils/rouletteFunctions");
const { gamesLog } = require("./logs/globalLogs");

class ScenesGenerator {
  prefix(bot) {
    const BuyPrefix = new Scenes.BaseScene("BuyPrefix");

    BuyPrefix.enter(async (ctx) => {
      await ctx.reply("–ù–µ –±–æ–ª—å—à–µ 16 —Å–∏–º–≤–æ–ª–æ–≤!");
    });

    BuyPrefix.on("text", async (ctx) => {
      const preff = ctx.message.text;
      if (preff.length <= 16) {
        await ctx.reply(
          "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!\n\n–û–∂–∏–¥–∞–π—Ç–µ, –≤—Å–∫–æ—Ä–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∞–º –≤—Å–µ –≤—ã–¥–∞—Å—Ç"
        );
        await bot.telegram.sendMessage(
          "1157591765",
          "–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É!\n\n–ò–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è @" +
            ctx.chat.username +
            "\n\n–ü—Ä–µ—Ñ–∏–∫—Å: <code>" +
            preff +
            "</code>",
          { parse_mode: "HTML" }
        );
        ctx.scene.leave();
      } else {
        ctx.scene.reenter();
      }
    });
    return BuyPrefix;
  }

  ChangePrefix(bot) {
    const ChangePrefix = new Scenes.BaseScene("ChangePrefix");

    ChangePrefix.enter(async (ctx) => {
      await ctx.reply("–ù–µ –±–æ–ª—å—à–µ 16 —Å–∏–º–≤–æ–ª–æ–≤!");
    });

    ChangePrefix.on("text", async (ctx) => {
      const chapref = ctx.message.text;
      if (chapref.length <= 16) {
        await ctx.reply(
          "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!\n\n–û–∂–∏–¥–∞–π—Ç–µ, –≤—Å–∫–æ—Ä–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∞–º –≤—Å–µ –ø–æ–º–µ–Ω—è–µ—Ç"
        );
        await bot.telegram.sendMessage(
          "1157591765",
          "–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É!\n\n–ò–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è @" +
            ctx.chat.username +
            "\n\n–°–º–µ–Ω–∞ –ø—Ä–µ—Ñ–∏–∫—Å–∞: <code>" +
            chapref +
            "</code>",
          { parse_mode: "HTML" }
        );
        ctx.scene.leave();
      } else {
        ctx.scene.reenter();
      }
    });
    return ChangePrefix;
  }

  rouletteScene() {
    const rouletteScene = new Scenes.BaseScene("rouletteScene");

    rouletteScene.enter(async (ctx) => {
      const user = await getUser(
        ctx.from.id,
        ctx.from.first_name,
        ctx.from.username
      );
      const message = `üÉè –î–ª—è –∏–≥—Ä—ã –≤ —Ä—É–ª–µ—Ç–∫—É —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—É–º–º—É, –Ω–∞–ø–∏—Å–∞–≤ –µ—ë –≤ —á–∞—Ç, –∞ –ø–æ—Ç–æ–º –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ —Å—Ç–∞–≤–∫–æ–π.\n\n–ë–∞–ª–∞–Ω—Å: ${user.balance}`;
      await ctx.reply(message);
    });

    rouletteScene.hears(/^(\d+)$/, async (ctx) => {
      const rouletteMessage = ctx.session;

      const user = await getUser(
        ctx.from.id,
        ctx.from.first_name,
        ctx.from.username
      );

      const balance = user.balance;

      try {
        if (rouletteMessage.rouletteMessage) {
          await ctx.telegram.deleteMessage(
            ctx.chat.id,
            rouletteMessage.rouletteMessage
          );
        }
      } catch (err) {
        console.error(err);
      }

      const amount = Number(ctx.match[1]);

      if (balance < amount) {
        await ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Ñ–∞üò¢");
        return;
      }

      ctx.session.amount = amount;
      await ctx
        .replyWithPhoto(
          { source: "img/roulette.jpg" },
          {
            caption:
              "üÉè –°—Ç–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞.\n\n–°—Ç–∞–≤–∫–∞: " +
              amount +
              "\n–ë–∞–ª–∞–Ω—Å: " +
              balance,
            reply_markup: {
              inline_keyboard: [
                [
                  { text: "–ó–µ—Ä–æ", callback_data: "0" },
                  { text: "–ö—Ä–∞—Å–Ω–æ–µ", callback_data: "–∫—Ä–∞—Å–Ω–æ–µ" },
                  { text: "–ß–µ—Ä–Ω–æ–µ", callback_data: "—á–µ—Ä–Ω–æ–µ" },
                ],
                [
                  { text: "1-12", callback_data: "1-12" },
                  { text: "13-24", callback_data: "13-24" },
                  { text: "25-36", callback_data: "25-36" },
                ],
                [
                  { text: "–ß–µ—Ç", callback_data: "—á–µ—Ç" },
                  { text: "1-18", callback_data: "1-18" },
                  { text: "19-36", callback_data: "19-36" },
                  { text: "–ù–µ—á–µ—Ç", callback_data: "–Ω–µ—á–µ—Ç" },
                ],
                [{ text: "–û—Ç–º–µ–Ω–∞", callback_data: "–û—Ç–º–µ–Ω–∞" }],
              ],
            },
          }
        )
        .then((res) => {
          ctx.session.rouletteMessage = res.message_id;
        });
    });

    rouletteScene.action("–û—Ç–º–µ–Ω–∞", async (ctx) => {
      await ctx.deleteMessage();
      await ctx.reply("–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
      ctx.scene.leave();
    });

    rouletteScene.on("callback_query", async (ctx) => {
      try {
        await ctx.deleteMessage();
        const { amount } = ctx.session;
        const rouletteMessage = ctx.session;

        const user = await getUser(
          ctx.from.id,
          ctx.from.first_name,
          ctx.from.username
        );

        if (user.balance < amount) {
          await ctx.reply(
            "–£ –≤–∞—Å –∫–æ–Ω—á–∏–ª—Å—è –º–µ—Ñüò¢\n–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω–∞–±–µ—Ä–∏—Ç–µ —Ä—É–ª–µ—Ç–∫–∞"
          );
          ctx.scene.leave();
          return;
        }

        const rightCalback = [
          "0",
          "–∫—Ä–∞—Å–Ω–æ–µ",
          "—á–µ—Ä–Ω–æ–µ",
          "1-12",
          "13-24",
          "25-36",
          "—á–µ—Ç",
          "1-18",
          "19-36",
          "–Ω–µ—á–µ—Ç",
        ];
        const bet = ctx.callbackQuery.data;

        if (rightCalback.includes(bet)) {
          const winNumber = Math.floor(Math.random() * 36 + 1); // –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 36
          const winColor = getWinColor(winNumber);
          const winAmount = getWinAmount(amount, bet, winNumber);
          const message = `–í—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ: ${winNumber} (${winColor}),\n–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: ${amount} –Ω–∞ (${bet}). ${
            winAmount > 0
              ? `\nü•≥ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${winAmount}!\n\n–ë–∞–ª–∞–Ω—Å: ${
                  user.balance - amount + winAmount
                }`
              : `\nüòî –£–≤—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n–ë–∞–ª–∞–Ω—Å: ${
                  user.balance - amount
                }`
          }`;

          await ctx
            .replyWithPhoto(
              { source: "img/roulette.jpg" },
              {
                caption: message,
                reply_markup: {
                  inline_keyboard: [
                    [
                      { text: "–ó–µ—Ä–æ", callback_data: "0" },
                      { text: "–ö—Ä–∞—Å–Ω–æ–µ", callback_data: "–∫—Ä–∞—Å–Ω–æ–µ" },
                      { text: "–ß–µ—Ä–Ω–æ–µ", callback_data: "—á–µ—Ä–Ω–æ–µ" },
                    ],
                    [
                      { text: "1-12", callback_data: "1-12" },
                      { text: "13-24", callback_data: "13-24" },
                      { text: "25-36", callback_data: "25-36" },
                    ],
                    [
                      { text: "–ß–µ—Ç", callback_data: "—á–µ—Ç" },
                      { text: "1-18", callback_data: "1-18" },
                      { text: "19-36", callback_data: "19-36" },
                      { text: "–ù–µ—á–µ—Ç", callback_data: "–Ω–µ—á–µ—Ç" },
                    ],
                    [{ text: "–û—Ç–º–µ–Ω–∞", callback_data: "–û—Ç–º–µ–Ω–∞" }],
                  ],
                },
              }
            )
            .then((res) => {
              ctx.session.rouletteMessage = res.message_id;
            });
          const previousBalance = user.balance;
          user.balance -= amount;
          user.balance += winAmount;
          await gamesLog(user, "—Ä—É–ª–µ—Ç–∫—É", winAmount, previousBalance);
          await user.save();
        } else {
          await ctx.telegram.deleteMessage(
            ctx.chat.id,
            rouletteMessage.rouletteMessage
          );
          ctx.scene.leave();
        }
      } catch (e) {
        console.log(e);
      }
    });
    return rouletteScene;
  }
}

module.exports = { ScenesGenerator };
