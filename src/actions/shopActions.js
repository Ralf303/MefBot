const { Keyboard, Key } = require("telegram-keyboard");
const { Composer } = require("telegraf");
const { getUser } = require("../db/functions.js");
const { shopGenerator } = require("../utils/helpers.js");
const ru_text = require("../../ru_text.js");

const shopActions = new Composer();

shopActions.action(["1", "2", "3", "4", "5", "6"], async (ctx) => {
  try {
    await ctx.deleteMessage();
    const { data } = ctx.callbackQuery;
    await shopGenerator(String(data), ctx);
  } catch (error) {
    console.log(error);
  }
});

shopActions.action("farmApp", async (ctx) => {
  try {
    const user = await getUser(
      ctx.from.id,
      ctx.from.first_name,
      ctx.from.username
    );
    await ctx.deleteMessage();
    await ctx.reply(
      "‚ùóÔ∏è–£–õ–£–ß–®–ï–ù–ò–Ø –î–õ–Ø –§–ï–†–ú–´‚ùóÔ∏è\n\n–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —Å–±–æ—Ä–∞: " +
        user.meflvl +
        "\n–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –≤—Ä–µ–º–µ–Ω–∏: " +
        user.timelvl +
        "\n–¢–≤–æ–π –º–µ—Ñ: " +
        user.balance,
      Keyboard.inline([
        ["–£–ª—É—á—à–∏—Ç—å —Å–±–æ—Ä", "–£–ª—É—á—à–∏—Ç—å –≤—Ä–µ–º—è"],
        [Key.callback("–ó–∞–∫—Ä—ã—Ç—å", "dell"), Key.callback("üîô–ù–∞–∑–∞–¥", "menu")],
      ])
    );
  } catch (error) {
    console.log(error);
  }
});

shopActions.action("–£–ª—É—á—à–∏—Ç—å —Å–±–æ—Ä", async (ctx) => {
  try {
    await ctx.reply(
      ru_text.mef_upgrade,
      Keyboard.inline([
        [Key.callback("–ö—É–ø–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ", "mefapp")],
        [Key.callback("üîô–ù–∞–∑–∞–¥", "farmApp")],
      ])
    );
  } catch (error) {
    console.log(error);
  }
  await ctx.deleteMessage();
});

shopActions.action("–£–ª—É—á—à–∏—Ç—å –≤—Ä–µ–º—è", async (ctx) => {
  try {
    await ctx.deleteMessage();
    await ctx.reply(
      ru_text.time_upgrade,
      Keyboard.inline([
        [Key.callback("–ö—É–ø–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ", "timeapp")],
        [Key.callback("üîô–ù–∞–∑–∞–¥", "farmApp")],
      ])
    );
  } catch (error) {
    console.log(error);
  }
});

shopActions.action("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", async (ctx) => {
  try {
    await ctx.deleteMessage();
    await ctx.reply(
      ru_text.inventory_upgrade,
      Keyboard.inline([
        [Key.callback("–ö—É–ø–∏—Ç—å —Å–ª–æ—Ç", "slotapp")],
        [Key.callback("üîô–ù–∞–∑–∞–¥", "–£–ª—É—á—à–µ–Ω–∏—è")],
      ])
    );
  } catch (error) {
    console.log(error);
  }
});

shopActions.action("dell", async (ctx) => {
  try {
    await ctx.deleteMessage();
    ctx.scene.leave();
  } catch (error) {
    console.log(error);
  }
});

shopActions.action("–£–ª—É—á—à–µ–Ω–∏—è", async (ctx) => {
  try {
    await ctx.deleteMessage();
    await ctx.reply(
      "–ß—Ç–æ –±—É–¥–µ–º —É–ª—É—á—à–∞—Ç—å:",
      Keyboard.inline([
        ["–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", Key.callback("–§–µ—Ä–º—É", "farmApp")],
        [Key.callback("üîô–ù–∞–∑–∞–¥", "menu"), Key.callback("–ó–∞–∫—Ä—ã—Ç—å", "dell")],
      ])
    );
  } catch (error) {
    console.log(error);
  }
});

shopActions.action("–í–µ—â–∏", async (ctx) => {
  try {
    await ctx.deleteMessage();
    await ctx.reply(
      "–û—Ç–ª–∏—á–Ω–æ!\n–í –∫–∞–∫–æ–π –º–∞–≥–∞–∑–∏–Ω –ø–æ–π–¥–µ–º?",
      Keyboard.inline([
        [Key.callback("üì¶Bomj Gangüì¶", 1), Key.callback("üíºPaul Shopüíº", 2)],
        [
          Key.callback("üé©Clemente Houseüé©", 3),
          Key.callback("üíéGem Shopüíé", 5),
        ],
        [Key.callback("üë•Fam Shopüë•", 6)],
        [(Key.callback("üîô–ù–∞–∑–∞–¥", "menu"), Key.callback("–ó–∞–∫—Ä—ã—Ç—å", "dell"))],
      ])
    );
  } catch (error) {
    console.log(error);
  }
});

shopActions.action("menu", async (ctx) => {
  try {
    await ctx.deleteMessage();
    await ctx.reply(
      "–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å:",
      Keyboard.inline([
        ["–£–ª—É—á—à–µ–Ω–∏—è", "–í–µ—â–∏", Key.callback("ü§ë–î–æ–Ω–∞—Çü§ë", 4)],
        [Key.callback("–ó–∞–∫—Ä—ã—Ç—å", "dell")],
      ])
    );
  } catch (error) {
    console.log(error);
  }
});

module.exports = shopActions;
