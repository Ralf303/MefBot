import { Key, Keyboard } from "telegram-keyboard";
import { getUser } from "../../db/functions.js";
import { Card, User } from "../../db/models.js";
import { getRandomInt, separateNumber } from "../../utils/helpers.js";
import { getMineInfo } from "../mine-module/mine-service.js";

const getInventory = async (user, ctx) => {
  const cards = await Card.findAll({ where: { userId: user.id } });

  if (!cards.length) {
    return ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –≤–∏–¥–µ–æ–∫–∞—Ä—Ç");
  }
  const message = cards
    .map((card) => `‚Ä¢ –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞[<code>${card.id}</code>](+${card.lvl})`)
    .join("\n");

  return ctx.replyWithHTML(`–¢–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n\n${message}`);
};

const deleteCard = async (user, cardId) => {
  const card = await Card.findOne({ where: { id: cardId, userId: user.id } });

  if (!card) {
    return "–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–π –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ãüò•";
  }

  await card.destroy();
  return `–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞[<code>${card.id}</code>]`;
};

const giveCard = async (sender, cardId, ctx) => {
  try {
    const message = ctx.message.reply_to_message;

    if (!message) return;

    const receiverChatId = message.from.id;

    if (message.from.is_bot) {
      await ctx.reply("–ó–∞—á–µ–º –±–æ—Ç—É –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã?üßê");
      return;
    }

    const receiver = await getUser(receiverChatId);

    if (!receiver) {
      await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
      return;
    }

    const card = await Card.findOne({
      where: {
        id: cardId,
        userId: sender.id,
      },
    });

    if (!card) {
      await ctx.reply("–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–π –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã üò•");
      return;
    }

    if (sender.id === receiver.id) {
      await ctx.reply("–ò–¥–∏ –Ω–∞—Ö—É–π, —Ç–∞–∫ –Ω–µ–ª—å–∑—èüñï");
      return;
    }

    card.userId = receiver.id;

    await sender.save();
    await receiver.save();
    await card.save();

    await ctx.reply(
      `–¢—ã –ø–µ—Ä–µ–¥–∞–ª(–∞) –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞[${card.id}](${card.lvl}) <a href="tg://user?id=${receiver.chatId}">${receiver.firstname}</a>`,
      { parse_mode: "HTML" }
    );
  } catch (error) {
    console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –∫–∞—Ä—Ç—ã:", error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –∫–∞—Ä—Ç—ã");
  }
};

const buyCard = async (user) => {
  const price = 15000;

  if (user.gems < price) {
    return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–º–æ–≤ü•≤";
  }

  const count = await getMineInfo();

  if (count.cards <= 0) {
    return "–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—åü•≤";
  }

  count.cards -= 1;
  await count.save();

  const newCard = await Card.create({
    userId: user.id,
    lvl: 0,
    fuel: 0,
    balance: 0,
  });

  user.gems -= price;
  await user.save();

  return `–¢—ã –∫—É–ø–∏–ª(–∞): –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞[${newCard.id}]`;
};

const sellCard = async (user, id, price, replyMessage, ctx) => {
  try {
    if (price < 100) {
      return `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ 100 —Å—Ç–∞—Ä–æ–∫‚≠êÔ∏è`;
    }

    const item = await Card.findOne({
      where: {
        id: id,
        userId: user.id,
      },
    });

    if (!item) {
      return `–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–π –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ãüò•`;
    }

    if (replyMessage.isBot) {
      return `–ù–µ–ª—å–∑—è –ø—Ä–æ–¥–∞–≤–∞—Ç—å –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã –±–æ—Ç–∞–ºüò•`;
    }

    const receiver = await getUser(replyMessage.id);

    if (receiver.id === user.id) {
      return `–ù–µ–ª—å–∑—è –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µüò•`;
    }

    if (receiver.balance < price) {
      return `–£ —é–∑–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–∞—Ä–æ–∫üò•`;
    }

    await ctx.telegram.sendMessage(
      receiver.chatId,
      `${user.firstname} —Ö–æ—á–µ—Ç –ø—Ä–æ–¥–∞—Ç—å —Ç–µ–±–µ –í–∏–¥–µ–æ–∫–∞—Ä—Ç—É[${item.id}](+${
        item.lvl
      }) –∑–∞ ${separateNumber(price)} —Å—Ç–∞—Ä–æ–∫`,
      Keyboard.inline([
        [
          Key.callback(
            "–ü—Ä–∏–Ω—è—Ç—å",
            `card_buy ${item.id} ${user.chatId} ${receiver.chatId} ${price}`
          ),
        ],
        [Key.callback("–û—Ç–º–µ–Ω–∞", "cancel")],
      ]),
      { parse_mode: "HTML" }
    );

    return `–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã[${item.id}] –∑–∞ ${separateNumber(
      price
    )} —Å—Ç–∞—Ä–æ–∫ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ `;
  } catch (error) {
    console.log(error);
    return `–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ–∑–º–æ–∂–Ω–æ ${replyMessage.first_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –º–µ–Ω—è –≤ –ª—Å`;
  }
};

const upgradeCard = async (user, itemId) => {
  try {
    const hasCard = await Card.findOne({
      where: {
        userId: user.id,
        id: itemId,
      },
    });

    if (!hasCard) {
      return "–£ —Ç–µ–±—è –Ω–µ—Ç —ç—Ç–æ–π –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã üò•";
    }

    if (user.oil === 0) {
      return "–£ —Ç–µ–±—è –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–º–∞–∑–æ–∫ –¥–ª—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã üò•";
    }

    if (hasCard.lvl === 10) {
      return "–≠—Ç–∞ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è üí™";
    }

    const chance = getRandomInt(0, 100);

    let percent = 100 - (hasCard.lvl + 1) * 10;

    if (hasCard.lvl === 9) {
      percent = 1;
    }

    if (hasCard.lvl === 0) {
      percent = 90;
    }

    if (chance <= percent) {
      hasCard.lvl += 1;
      await hasCard.save();

      user.oil -= 1;
      await user.save();

      return `–¢—ã —É—Å–ø–µ—à–Ω–æ —É–ª—É—á—à–∏–ª –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞[${hasCard.id}] –¥–æ ${hasCard.lvl} —É—Ä–æ–≤–Ω—è üéâ`;
    } else {
      user.oil -= 1;
      await user.save();

      return "–¢—ã –Ω–µ —Å–º–æ–≥ —É–ª—É—á—à–∏—Ç—å –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É, —Å–º–∞–∑–∫–∞ —É—Ç–µ—Ä—è–Ω–∞ üò•";
    }
  } catch (error) {
    console.log(error);
  }
};

export { getInventory, deleteCard, giveCard, buyCard, sellCard, upgradeCard };
