import { Composer } from "telegraf";
import { message } from "telegraf/filters";
import { shopGenerator } from "../../utils/helpers.js";
import { Key, Keyboard } from "telegram-keyboard";

const donateRouter = new Composer();

donateRouter.on(message("text"), async (ctx, next) => {
  try {
    const userMessage = ctx.message.text.toLowerCase();
    const [word1] = userMessage.split(" ");

    if (word1 == "–¥–æ–Ω–∞—Ç" || userMessage == "ü§ë –¥–æ–Ω–∞—Ç ü§ë") {
      await shopGenerator("4", ctx);
    }

    if (word1 == "–æ—Ç—Å—ã–ø–∞—Ç—å") {
      await giveStars(ctx);
    }

    return next();
  } catch (e) {
    await ctx.reply("–ö–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞, " + e);
  }
});

donateRouter.hears("1", async (ctx) => {
  const pay = await ctx.telegram.createInvoiceLink({
    title: "–¢–£–¢ –¢–ê–ô–¢–õ",
    description: "–¢–£–¢ –û–ü–ò–°–ê–ù–ò–ï –û–ù–û –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –î–û–õ–ñ–ù–û –ë–´–¢–¨",
    payload: "gold",
    currency: "XTR",
    prices: [{ label: "–¢–£–¢ –õ–ï–ô–ë–õ –¢–ò–ü–û", amount: 1 }],
  });

  ctx.reply(
    `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ 1 –ì–æ–ª–¥`,
    Keyboard.inline([Key.url("–ü–æ–ø–æ–ª–Ω–∏—Ç—å (–æ–ª–µ–≥ –≥–µ–π)", pay)])
  );
});

donateRouter.hears("2", async (ctx) => {
  await ctx.telegram.sendInvoice(ctx.chat.id, {
    title: "–¢–£–¢ –¢–ê–ô–¢–õ",
    description: "–¢–£–¢ –û–ü–ò–°–ê–ù–ò–ï –û–ù–û –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –î–û–õ–ñ–ù–û –ë–´–¢–¨",
    payload: "gold",
    currency: "XTR",
    prices: [{ label: "–¢–£–¢ –õ–ï–ô–ë–õ –¢–ò–ü–û", amount: 1 }],
  });
});

donateRouter.on("pre_checkout_query", async (ctx) => {
  await ctx.answerPreCheckoutQuery(true);
});

donateRouter.on(message("successful_payment"), async (ctx) => {
  console.log(ctx);

  await ctx.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.");
});

export default donateRouter;
