import { Composer } from "telegraf";
import { separateNumber } from "../../utils/helpers.js";

const donatAction = new Composer();

donatAction.action(
  /^confirm_donate_(\d+)_(\d+)_(stars|stones)$/,
  async (ctx) => {
    const count = Number(ctx.match[1]);
    const userId = Number(ctx.match[2]);
    const type = ctx.match[3];

    if (ctx.from.id !== userId) {
      await ctx.answerCbQuery("–ù–µ —Ç—ã–∫–∞–π –∫—É–¥–∞ –Ω–µ –Ω–∞–¥–æ üò°");
      return;
    }

    const user = ctx.state.user;

    if (user.donate < count) {
      await ctx.editMessageText(
        `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å–∫—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ${count} ${
          type === "stars" ? "—Å—Ç–∞—Ä–æ–∫" : "–∫–∞–º–Ω–µ–π"
        } ü•≤`
      );
      return;
    }

    user.donate -= count;

    if (type === "stars") {
      user.balance += count * 5000;
    } else if (type === "stones") {
      user.stones += count;
    }

    await user.save();

    try {
      await ctx.deleteMessage();
    } catch (e) {}

    if (type === "stars") {
      await ctx.reply(
        `–¢—ã —É—Å–ø–µ—à–Ω–æ –æ–±–º–µ–Ω—è–ª ${count} –∏—Å–∫—Ä –Ω–∞ ${separateNumber(
          count * 5000
        )} —Å—Ç–∞—Ä–æ–∫! üéâ\n\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å —Ç–µ–ø–µ—Ä—å: ${separateNumber(user.balance)} üåü`
      );
    } else if (type === "stones") {
      await ctx.reply(
        `–¢—ã —É—Å–ø–µ—à–Ω–æ –æ–±–º–µ–Ω—è–ª ${count} –∏—Å–∫—Ä –Ω–∞ ${count} –∫–∞–º–Ω–µ–π! üéâ\n\n–£ —Ç–µ–±—è —Ç–µ–ø–µ—Ä—å ${user.stones} —Ç–æ—á–∏–ª—å–Ω—ã—Ö –∫–∞–º–Ω–µ–π`
      );
    }
  }
);

export default donatAction;
