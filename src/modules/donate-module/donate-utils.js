import { checkUserByUsername, getUser } from "../../db/functions.js";
import { separateNumber } from "../../utils/helpers.js";

const giveDonate = async (ctx) => {
  const chatId = ctx.from.id;
  const replyMessage = ctx.message.reply_to_message;
  const textParts = ctx.message.text.split(" ");
  const amount = parseInt(textParts[2]);

  if (isNaN(amount) || amount <= 0) {
    await ctx.reply("–£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏.");
    return;
  }

  let receiver = null;
  let transferredViaUsername = false;

  if (replyMessage) {
    if (replyMessage.from.is_bot) {
      await ctx.reply("–ó–∞—á–µ–º –±–æ—Ç—É –∏—Å–∫—Ä—ãüßê");
      return;
    }

    receiver = await getUser(replyMessage.from.id);
  } else {
    const usernamePart = textParts.find((part) => part.startsWith("@"));
    if (!usernamePart) {
      await ctx.reply("–°–¥–µ–ª–∞–π —Ä–µ–ø–ª–∞–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏ @username.");
      return;
    }

    const username = usernamePart.replace("@", "").toLowerCase();
    receiver = await checkUserByUsername(username);

    if (!receiver) {
      await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }

    if (receiver.chatId === chatId) {
      await ctx.reply("–ò–¥–∏ –Ω–∞—Ö—É–π, —Ç–∞–∫ –Ω–µ–ª—å–∑—èüñï");
      return;
    }

    transferredViaUsername = true;
  }

  try {
    const sender = await getUser(chatId);

    if (sender.donate < amount) {
      await ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å–∫—Äü•≤");
      return;
    }

    if (receiver.chatId === sender.chatId) {
      await ctx.reply("–ò–¥–∏ –Ω–∞—Ö—É–π, —Ç–∞–∫ –Ω–µ–ª—å–∑—èüñï");
      return;
    }

    if (amount < 1) {
      await ctx.reply("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–¥–∞—á–∏ 1 –∏—Å–∫—Ä–∞");
      return;
    }

    sender.donate -= amount;
    receiver.donate += amount;
    await sender.save();
    await receiver.save();

    await ctx.reply(
      `–¢—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–ª(–∞) ${separateNumber(
        amount
      )} –∏—Å–∫—Ä <a href="tg://user?id=${receiver.chatId}">${
        receiver.firstname
      }</a>`,
      { parse_mode: "HTML" }
    );

    if (transferredViaUsername) {
      try {
        await ctx.telegram.sendMessage(
          receiver.chatId,
          `–¢–µ–±–µ –ø–µ—Ä–µ–¥–∞–ª–∏ ${separateNumber(amount)} –∏—Å–∫—Ä –æ—Ç ${
            ctx.from.first_name
          }`
        );
      } catch (err) {
        console.log("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é:", err.message);
      }
    }
  } catch (error) {
    console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –∏—Å–∫—Ä:", error);
    await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏.");
  }
};

export { giveDonate };
