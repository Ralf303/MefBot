import { Composer } from "telegraf";
import { message } from "telegraf/filters";
import items from "../items-module/items.js";
import { buyItem } from "../items-module/items-utils/items-functions.js";
import { getUser } from "../../db/functions.js";
import { User, Roles, Logs, Home } from "../../db/models.js";
import { generatePassword } from "../../utils/helpers.js";
import { adminList, adminTriggers } from "./admins.js";
import addServise from "../../services/add-servise.js";
import { getUserCase } from "../case-module/case-utils/case-tool-service.js";

const adminRouter = new Composer();

adminRouter.on(message("text"), async (ctx, next) => {
  const userMessage = ctx.message.text.toLowerCase();
  const [word1, word2, word3] = userMessage.split(" ");
  const IsAdmin = adminList.includes(ctx.from.id);

  try {
    if (IsAdmin) {
      if (word1 == "–¥–æ–º" && word2 == "–∑–∞–¥–∞—Ç—å") {
        await Home.update({ homeId: Number(word3) }, { where: { userId: 1 } });
        await ctx.reply("–ì–æ—Ç–æ–≤–æ, –±–æ—Å—Å üëå");
      }

      if (userMessage == "—Å–ø–∏—Å–æ–∫ –≤–µ—â–µ–π") {
        let result = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–µ—â–µ–π\n";
        let i = 1;
        for (const item in items) {
          result += `${items[item].name}[<code>${item}</code>]\n`;
          i++;
        }
        await ctx.replyWithHTML(result);
      }

      if (userMessage == "-—Ñ–µ—Ä–º–∞") {
        await User.update({ farmtime: 0 }, { where: {} });
        await ctx.reply("–≥–æ—Ç–æ–≤–æ :)");
      }

      if (userMessage == "—Ä–∞–∑–¥–∞—á–∞ –∫–æ–Ω–µ—Ü") {
        addServise.end(ctx);
      }

      if (userMessage == "—Ä–∞–∑–¥–∞—á–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ") {
        const count = await addServise.count();
        await ctx.reply(`–Æ–∑–µ—Ä–æ–≤ –≤ —Ä–∞–∑–¥–∞—á–µ ${count}`);
      }

      if (word1 == "–≤—ã–¥–∞—Ç—å") {
        const id = Number(word3);
        const itemInfo = items[id];

        if (word2 == "–º–∞–Ω–∏" && !isNaN(id)) {
          ctx.state.user.balance += id;
          await ctx.reply(`–£—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ ${id} —Å—Ç–∞—Ä–æ–∫`);
        }

        if (word2 == "–≥–µ–º—ã" && !isNaN(id)) {
          ctx.state.user.gems += id;
          await ctx.reply(`–£—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ ${id} –≥–µ–º–æ–≤`);
        }

        if (word2 == "–∫–ª—é—á–∏" && !isNaN(id)) {
          ctx.state.user.chests += id;
          await ctx.reply(`–£—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ ${id} –∫–ª—é—á–µ–π`);
        }

        if (word2 == "–∫–µ–π—Å" && !isNaN(id)) {
          const userCase = await getUserCase(ctx.state.user.id);
          userCase.donate += id;
          await ctx.reply(`–£—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ ${id} –¥–æ–Ω–∞—Ç –∫–µ–π—Å–æ–≤`);
          await userCase.save();
        }

        if (word2 == "–≤–µ—â—å" && itemInfo && !isNaN(id)) {
          await buyItem(ctx.state.user, itemInfo, ctx);
        } else if (word2 == "–≤–µ—â—å") {
          await ctx.reply("–¢–∞–∫–æ–π –≤–µ—â–∏ –Ω–µ—Ç");
        }
      }

      if (userMessage == "–æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å") {
        const id = 1157591765;
        const needUser = await User.findOne({ where: { chatId: id } });

        if (needUser) {
          const existingFounder = await Roles.findOne({
            where: { status: "founder", roleId: needUser.id },
          });

          if (existingFounder) {
            ctx.reply("–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
          } else {
            const password = "nikita050606";
            const newFounder = await Roles.create({
              status: "founder",
              password: password,
            });

            needUser.setRole(newFounder);

            const message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${needUser.username} –≤–µ—Ä–Ω—É–ª –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è. –ü–∞—Ä–æ–ª—å –æ–Ω –∑–Ω–∞–µ—Ç`;
            ctx.reply(message);
            ctx.telegram.sendMessage(
              id,
              `–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–∞—Ä–æ–ª—å: ${password}`
            );
          }
        } else {
          ctx.reply("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–Ω —É–∂–µ —Å–æ–∑–¥–∞–Ω");
        }
      }

      if (word1 === "–∞–¥–º–∏–Ω–∫–∞") {
        const id = Number(word2);

        if (!isNaN(id)) {
          const needUser = await User.findOne({ where: { chatId: id } });

          if (needUser) {
            const existingManager = await Roles.findOne({
              where: { status: "manager", roleId: needUser.id },
            });

            if (existingManager) {
              ctx.reply("–ú–µ–Ω–µ–¥–∂–µ—Ä —Å —Ç–∞–∫–∏–º –∞–π–¥–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
            } else {
              const password = generatePassword(10);

              const newManager = await Roles.create({
                status: "manager",
                password: password,
              });

              needUser.setRole(newManager);

              const message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${needUser.username} —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º. –ü–∞—Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª—Å`;
              await ctx.reply(message);
              await ctx.telegram.sendMessage(
                id,
                `–í—ã —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç–µ—Å—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º. –õ–æ–≥–∏–Ω: ${needUser.chatId} –ü–∞—Ä–æ–ª—å: ${password}\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∫—É http://mefadmin.ru`
              );
            }
          } else {
            ctx.reply("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–Ω —É–∂–µ —Å–æ–∑–¥–∞–Ω");
          }
        }
      }

      if (word1 === "-–∞–¥–º–∏–Ω–∫–∞") {
        const id = Number(word2);

        if (!isNaN(id)) {
          const needUser = await User.findOne({ where: { chatId: id } });

          if (needUser) {
            const existingManager = await Roles.findOne({
              where: { status: "manager", roleId: needUser.id },
            });

            if (!existingManager) {
              ctx.reply("–£ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∞");
            } else {
              await existingManager.destroy();
              ctx.reply("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞");
            }
          } else {
            ctx.reply("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
          }
        }
      }
    } else if (
      adminTriggers.includes(userMessage) ||
      adminTriggers.includes(word1)
    ) {
      await ctx.reply("–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º");
    }
    return next();
  } catch (e) {
    console.log(e);
  }
});

export default adminRouter;
