const { Composer } = require("telegraf");
const { Item } = require("../../db/models");
const { getUser } = require("../../db/functions");
const { separateNumber } = require("../../utils/helpers");
const { loseLog, resiveLog } = require("../logs-module/globalLogs");

const itemsActions = new Composer();

itemsActions.action(/^sell/, async (ctx) => {
  try {
    await ctx.deleteMessage();
    const [_, itemId, senderId, receiverId, price] =
      ctx.callbackQuery.data.split(" ");
    const receiver = await getUser(receiverId);
    const sender = await getUser(senderId);
    const item = await Item.findOne({
      where: {
        id: itemId,
        userId: sender.id,
      },
    });

    if (!item) {
      return await ctx.reply(`–Æ–∑–µ—Ä —É–∂–µ –ø—Ä–æ–¥–∞–ª –≤–µ—â—å –∏ –µ–µ —É –Ω–µ–≥–æ –Ω–µ—Çüò•`);
    }

    if (receiver.fullSlots >= receiver.slots) {
      return await ctx.reply(`–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ—Ç–æ–≤üò•`);
    }

    if (receiver.balance < price) {
      return await ctx.reply(`–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Ñ–∞üò•`);
    }

    receiver.balance -= Number(price);
    sender.balance += Number(price);
    sender.fullSlots--;
    receiver.fullSlots++;
    item.userId = receiver.id;

    await sender.save();
    await receiver.save();
    await item.save();
    await loseLog(sender, `${item.itemName[item.id]}`, "–ø—Ä–æ–¥–∞–∂–∞ –¥—Ä—É–≥–æ–º—É —é–∑–µ—Ä—É");
    await resiveLog(
      receiver,
      `${item.itemName[item.id]}`,
      1,
      "–ø–æ–∫—É–ø–∫–∞ —É –¥—Ä—É–≥–æ–≥–æ —é–∑–µ—Ä–∞"
    );
    await loseLog(sender, `–º–µ—Ñ`, "–ø—Ä–æ–¥–∞–∂–∞ –¥—Ä—É–≥–æ–º—É —é–∑–µ—Ä—É");
    await resiveLog(receiver, `–º–µ—Ñ`, price, "–ø–æ–∫—É–ø–∫–∞ —É –¥—Ä—É–≥–æ–≥–æ —é–∑–µ—Ä–∞");
    await ctx.reply(
      `–¢—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª(–∞) ${item.itemName} –∑–∞ ${separateNumber(price)} –º–µ—Ñ–∞`
    );
    await ctx.telegram.sendMessage(
      sender.chatId,
      `–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª–∏ ${item.itemName}[${item.id}] –∑–∞ ${separateNumber(
        price
      )} –º–µ—Ñ–∞`,
      { parse_mode: "HTML" }
    );
  } catch (error) {
    console.log(error);
  }
});

itemsActions.action("cancel", async (ctx) => {
  try {
    await ctx.deleteMessage();
    await ctx.reply("–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞");
  } catch (error) {
    console.log(error);
  }
});

module.exports = itemsActions;
