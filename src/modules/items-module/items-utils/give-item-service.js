import { User, Item } from "../../../db/models.js";
import { loseLog, giveResoursesLog } from "../../logs-module/globalLogs.js";

const giveItem = async (sender, id, ctx) => {
  try {
    const message = ctx.message.reply_to_message;

    if (!message) {
      return;
    }

    const receiverChatId = message.from.id;

    // –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–º
    if (message.from.is_bot) {
      await ctx.reply("–ó–∞—á–µ–º –±–æ—Ç—É –ø—Ä–µ–¥–º–µ—Ç—ãüßê");
      return;
    }

    const receiver = await User.findOne({
      where: { chatId: receiverChatId },
    });

    const item = await Item.findOne({
      where: {
        id: id,
        userId: sender.id,
      },
    });

    if (!item) {
      await ctx.reply(`–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–π –≤–µ—â–∏ üò•`);
      return;
    }

    if (receiver.slots <= receiver.fullSlots) {
      await ctx.reply(`–£ ${receiver.firstname} –Ω–µ—Ç –º–µ—Å—Ç–∞ üò•`);
      return;
    }

    if (item.isWorn) {
      item.isWorn = false;
    }

    if (sender.id === receiver.id) {
      await ctx.reply(`–ò–¥–∏ –Ω–∞—Ö—É–π, —Ç–∞–∫ –Ω–µ–ª—å–∑—èüñï`);
      return;
    }
    sender.fullSlots--;
    receiver.fullSlots++;
    item.userId = receiver.id;

    await sender.save();
    await receiver.save();
    await item.save();
    await ctx.reply(
      `–¢—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–ª(–∞) ${item.itemName}[${item.id}](+${item.lvl}) <a href="tg://user?id=${receiver.chatId}">${receiver.firstname}</a>`,
      { parse_mode: "HTML" }
    );
    await loseLog(
      sender,
      `${item.itemName}[${item.id}]`,
      "–ø–µ—Ä–µ–¥–∞—á–∞ –¥—Ä—É–≥–æ–º—É —é–∑–µ—Ä—É"
    );
    await giveResoursesLog(
      sender,
      receiver,
      `${item.itemName}[${item.id}]`,
      "1"
    );
  } catch (error) {
    console.log(error);
  }
};

export { giveItem };
