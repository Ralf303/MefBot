import { Item, User } from "../../../db/models.js";
import items from "../items.js";
import { loseLog } from "../../logs-module/globalLogs.js";
import { getRandomInt, separateNumber } from "../../../utils/helpers.js";
import { checkItem } from "./item-tool-service.js";
import { getUser } from "../../../db/functions.js";
import { Keyboard, Key } from "telegram-keyboard";
import dotenv from "dotenv";
dotenv.config({
  path: process.env.NODE_ENV === "production" ? ".env.prod" : ".env.dev",
});

const buyItem = async (user, itemInfo, ctx, status) => {
  if (user.slots < user.fullSlots) {
    await ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ—Ç–æ–≤üò•");
    return;
  }

  if (!itemInfo.canBuy && status) {
    await ctx.reply("–≠—Ç—É –≤–µ—â—å –Ω–µ–ª—å–∑—è –∫—É–ø–∏—Ç—åüò•");
    return;
  }

  if (
    user.balance < itemInfo.price &&
    status &&
    itemInfo.class !== "gem" &&
    itemInfo.class !== "fam"
  ) {
    await ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–∞—Ä–æ–∫ üò¢");
    return;
  } else if (status && itemInfo.class !== "gem" && itemInfo.class !== "fam") {
    user.balance -= itemInfo.price;
  }

  if (user.gems < itemInfo.price && status && itemInfo.class === "gem") {
    await ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–º–æ–≤ üò¢");
    return;
  } else if (status && itemInfo.class === "gem") {
    user.gems -= itemInfo.price;
  }

  if (user.famMoney < itemInfo.price && status && itemInfo.class === "fam") {
    await ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–µ–º–µ–π–Ω—ã—Ö –º–æ–Ω–µ—Ç üò¢");
    return;
  } else if (status && itemInfo.class === "fam") {
    user.famMoney -= itemInfo.price;
  }

  // if (user.snows < itemInfo.price && status && itemInfo.class === "event") {
  //   await ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–Ω–µ–∂–∏–Ω–æ–∫ üò¢");
  //   return;
  // } else if (status && itemInfo.class === "event") {
  //   user.snows -= itemInfo.price;
  // }

  await User.increment({ fullSlots: 1 }, { where: { id: user.id } });
  const item = await Item.create({
    src: itemInfo.src,
    itemName: itemInfo.name,
    bodyPart: itemInfo.bodyPart,
    isWorn: false,
    price: itemInfo.price,
  });

  await user.addItem(item);
  await user.save();
  await item.save();
  await ctx.replyWithHTML(
    `–¢—ã –∫—É–ø–∏–ª(–∞): ${item.itemName}[${item.id}]\n\nüìñ<code>–ù–∞–¥–µ—Ç—å ${item.id}</code>`
  );

  const chance = getRandomInt(0, 100);

  if (chance === 5) {
    const itemInfo = items[125];
    const item = await Item.create({
      src: itemInfo.src,
      itemName: itemInfo.name,
      bodyPart: itemInfo.bodyPart,
      isWorn: false,
      price: itemInfo.price,
    });

    await User.increment({ fullSlots: 1 }, { where: { id: user.id } });

    await user.addItem(item);
    await user.save();
    await item.save();
    await ctx.replyWithHTML(
      `‚ùóÔ∏è–¢—ã –∏—Å–ø—ã—Ç–∞–ª —É–¥–∞—á—É –∏ –ø–æ–ª—É—á–∏–ª ${itemInfo.name}‚ùóÔ∏è`
    );
    await ctx.telegram.sendMessage(
      process.env.CHAT_ID,
      `‚ùóÔ∏è@${user.username} –∏—Å–ø—ã—Ç–∞–ª —É–¥–∞—á—É –∏ –ø–æ–ª—É—á–∏–ª ${itemInfo.name}‚ùóÔ∏è`
    );
  }
};

const deleteItem = async (user, id) => {
  const item = await Item.findOne({
    where: {
      id: id,
      userId: user.id,
    },
  });

  if (!item) {
    return `–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–π –≤–µ—â–∏üò•`;
  }
  const havePups = await checkItem(user.id, "–ü—É–ø—Å ¬´–ë–∞—Ä—Ç–µ—Ä¬ª");
  let cashBack;
  if (havePups) {
    cashBack = item.price;
  } else {
    cashBack = item.price / 2;
  }

  await loseLog(user, `${item.itemName}[${item.id}]`, `–£–¥–∞–ª–µ–Ω–∏–µ`);
  user.balance += cashBack;
  user.fullSlots--;
  await item.destroy();
  await user.save();
  return `–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –≤–µ—â—å ${item.itemName}[${item.id}]\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${cashBack}`;
};

const removeItem = async (user, id, ctx) => {
  try {
    const item = await Item.findOne({
      where: {
        id: id,
        userId: user.id,
      },
    });

    if (!item) {
      await ctx.reply("–¢–∞–∫–æ–π –≤–µ—â–∏ —É —Ç–µ–±—è –Ω–µ—Çüò•");
      return;
    }

    if (!item.isWorn) {
      await ctx.reply("–≠—Ç–∞ –≤–µ—â—å –∏ —Ç–∞–∫ –Ω–µ –Ω–∞–¥–µ—Ç–∞üòé");
      return;
    }

    // —Å–Ω–∏–º–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
    item.isWorn = false;
    await item.save();

    await ctx.reply(`–¢—ã —Å–Ω—è–ª(–∞) ${item.itemName}[${id}](+${item.lvl})`);
  } catch (error) {
    console.log(error);
    await ctx.reply("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫");
  }
};

const getInventory = async (user, ctx) => {
  try {
    let buttons = Keyboard.inline([Key.callback("üîΩ–ó–∞–∫—Ä—ã—Ç—åüîΩ", "dell")]);
    const items = await user.getItems();

    if (items.length === 0) {
      await ctx.reply("–¢–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.");
      return;
    }

    const categories = {
      head: "–ì–æ–ª–æ–≤–∞",
      face: "–õ–∏—Ü–æ",
      legs: "–ù–æ–≥–∏",
      leg1: "–ù–æ–≥–∏",
      leg2: "–ù–æ–≥–∏",
      left: "–†—É–∫–∞(L)",
      right: "–†—É–∫–∞(R)",
      extra: "–ü—Ä–æ—á–µ–µ",
      default: "–ü—Ä–æ—á–µ–µ",
    };

    const categorizedItems = {
      –ì–æ–ª–æ–≤–∞: [],
      –õ–∏—Ü–æ: [],
      –ù–æ–≥–∏: [],
      "–†—É–∫–∞(L)": [],
      "–†—É–∫–∞(R)": [],
      –ü—Ä–æ—á–µ–µ: [],
    };

    items.forEach((item) => {
      const category = categories[item.bodyPart] || categories.default;
      categorizedItems[category].push(
        `${item.itemName}[<code>${item.id}</code>](+${item.lvl})`
      );
    });

    const inventoryMessage = Object.entries(categorizedItems)
      .map(([category, items]) => {
        if (items.length > 0) {
          return `‚Ä¢ ${category}:\n${items.join("\n")}`;
        }
        return "";
      })
      .filter((section) => section)
      .join("\n\n");

    const message = `–¢–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n\n${inventoryMessage}\n\nüìñ–ù–∞–¥–µ—Ç—å id\nüìñ–£–¥–∞–ª–∏—Ç—å –≤–µ—â—å id\nüìñ–ü–µ—Ä–µ–¥–∞—Ç—å –≤–µ—â—å id\nüìñ–£–∑–Ω–∞—Ç—å –∞–π–¥–∏ id`;

    if (message.length > 4000) {
      const firstPage = inventoryMessage.slice(0, 150);
      buttons = Keyboard.inline([
        [Key.callback("–î–∞–ª—å—à–µ", "next")],
        [Key.callback("üîΩ–ó–∞–∫—Ä—ã—Ç—åüîΩ", "dell")],
      ]);

      await ctx.replyWithHTML(
        '–¢–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç –≤ <a href="https://t.me/PablMefBot">–õ–° –±–æ—Ç–∞</a>',
        {
          reply_to_message_id: ctx.message.message_id,
          disable_web_page_preview: true,
        }
      );

      await ctx.telegram.sendMessage(user.chatId, firstPage, {
        parse_mode: "HTML",
        reply_markup: buttons.reply_markup,
      });
    } else {
      await ctx.replyWithHTML(message);
    }
  } catch (e) {
    console.log(e);
    return;
  }
};

const sellItem = async (user, id, price, replyMessage, ctx) => {
  try {
    if (price < 100) {
      return `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ 100 —Å—Ç–∞—Ä–æ–∫‚≠êÔ∏è`;
    }

    const item = await Item.findOne({
      where: {
        id: id,
        userId: user.id,
      },
    });

    if (!item) {
      return `–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–π –≤–µ—â–∏üò•`;
    }

    if (replyMessage.isBot) {
      return `–ù–µ–ª—å–∑—è –ø—Ä–æ–¥–∞–≤–∞—Ç—å –≤–µ—â–∏ –±–æ—Ç–∞–ºüò•`;
    }

    const receiver = await getUser(replyMessage.id);

    if (receiver.id === user.id) {
      return `–ù–µ–ª—å–∑—è –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µüò•`;
    }

    if (receiver.fullSlots >= receiver.slots) {
      return `–£ —é–∑–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ—Ç–æ–≤üò•`;
    }

    if (receiver.balance < price) {
      return `–£ —é–∑–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–∞—Ä–æ–∫üò•`;
    }

    await ctx.telegram.sendMessage(
      receiver.chatId,
      `${user.firstname} —Ö–æ—á–µ—Ç –ø—Ä–æ–¥–∞—Ç—å —Ç–µ–±–µ ${item.itemName}[${item.id}](+${
        item.lvl
      }) –∑–∞ ${separateNumber(price)} —Å—Ç–∞—Ä–æ–∫`,
      Keyboard.inline([
        [
          Key.callback(
            "–ü—Ä–∏–Ω—è—Ç—å",
            `sell ${item.id} ${user.chatId} ${receiver.chatId} ${price}`
          ),
        ],
        [Key.callback("–û—Ç–º–µ–Ω–∞", "cancel")],
      ]),
      { parse_mode: "HTML" }
    );

    return `–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ ${item.itemName}[${
      item.id
    }] –∑–∞ ${separateNumber(price)} —Å—Ç–∞—Ä–æ–∫ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ `;
  } catch (error) {
    console.log(error);
    return `–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ–∑–º–æ–∂–Ω–æ ${replyMessage.first_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –º–µ–Ω—è –≤ –ª—Å`;
  }
};

const getItemsLvl = async (userId) => {
  const items = await Item.findAll({
    where: {
      userId: userId,
      isWorn: true,
    },
  });

  let lvl = 0;
  items.forEach((item) => {
    lvl += item.lvl;
  });

  return lvl;
};

export { buyItem, deleteItem, removeItem, getInventory, sellItem, getItemsLvl };
