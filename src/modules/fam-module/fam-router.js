const { Composer } = require("telegraf");
const ru_text = require("../../../ru_text");
const {
  getFamilyByUserId,
  getRang,
  addUserToFamily,
  getMainUser,
  getDeputies,
  removeUserFromFamily,
  getFamilyByFamId,
  setRang,
  getBufsText,
  getTopFams,
  getFamilyMembers,
} = require("./fam-service");
const { Keyboard, Key } = require("telegram-keyboard");
const {
  checkUserById,
  checkUserByUsername,
  getUser,
} = require("../../db/functions");
const redisServise = require("../../services/redis-servise");
const { separateNumber } = require("../../utils/helpers");

const famModule = new Composer();

famModule.hears(/^—Å–µ–º—å—è$/i, async (ctx, next) => {
  try {
    await ctx.reply(ru_text.family);

    return next();
  } catch (error) {
    console.log(error);
  }
});

famModule.hears(/^–º–æ—è —Å–µ–º—å—è$/i, async (ctx, next) => {
  try {
    const fam = await getFamilyByUserId(ctx.from.id);

    if (!fam) return await ctx.reply("–£ —Ç–µ–±—è –Ω–µ—Ç —Å–µ–º—å–∏ üò¢");
    const rang = await getRang(ctx.from.id, fam.id);
    const mainUser = await getMainUser(fam.id);
    const zams = await getDeputies(fam.id);
    let zam1 = "–Ω–µ—Ç";
    let zam2 = "–Ω–µ—Ç";

    if (zams.length > 0) {
      zam1 = await getUser(zams[0].userId);
      zam1 = `<a href="tg://openmessage?user_id=${zam1.chatId}">${zam1.firstname}</a>`;
    }

    if (zams.length > 1) {
      zam2 = await getUser(zams[1].userId);
      zam2 = `<a href="tg://openmessage?user_id=${zam2.chatId}">${zam2.firstname}</a>`;
    }

    await ctx.reply(
      `‚öîÔ∏è [${fam.id}] –°–µ–º—å—è ¬´${
        fam.name
      }¬ª\n\nüîÖ –õ–∏–¥–µ—Ä: <a href="tg://openmessage?user_id=${mainUser.chatId}">${
        mainUser.firstname
      }</a>\nüîÖ –ó–∞–º: ${zam1}\nüîÖ –ó–∞–º: ${zam2}\nüíº –¢–≤–æ–π —Ä–∞–Ω–≥: ${rang}\n‚ò¢Ô∏è –†–µ–ø—É—Ç–∞—Ü–∏—è: ${
        fam.reputation
      }\n${fam.check ? "‚úÖ" : "‚ùå"} –ì–∞–ª–æ—á–∫–∞: ${
        fam.check ? "–µ—Å—Ç—å" : "–Ω–µ—Ç"
      }\nüí∞ –ü—Ä–æ—Ü–µ–Ω—Ç —Ñ–µ—Ä–º—ã: ${fam.percent}%\n‚≠êÔ∏è –°—Ç–∞—Ä–∫–∏: ${separateNumber(
        fam.mef
      )}\nü™ô –ú–æ–Ω–µ—Ç—ã: ${separateNumber(fam.balance)}\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${
        fam.fullSlots
      }\nüè† –ú–∞–∫—Å. –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${fam.slots}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: ${fam.description}`,
      {
        parse_mode: "HTML",
        disable_notification: true,
      }
    );

    return next();
  } catch (error) {
    console.log(error);
  }
});

famModule.hears(/^—Å–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é$/i, async (ctx, next) => {
  try {
    const fam = await getFamilyByUserId(ctx.from.id);

    if (fam) return await ctx.reply("–£ —Ç–µ–±—è –∏ —Ç–∞–∫ —É–∂–µ –µ—Å—Ç—å —Å–µ–º—å—è üò≥");

    if (ctx.chat.type !== "private")
      return await ctx.reply("–°–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª—Å");

    await ctx.reply(
      ru_text.buy_fam,
      Keyboard.inline([
        [Key.callback("‚úÖ –¢–æ—á–Ω–æ –∫—É–ø–∏—Ç—å ‚úÖ", "fam" + ctx.from.id)],
      ])
    );

    return next();
  } catch (error) {
    console.log(error);
  }
});

famModule.hears(/^—Å–µ–º—å—è –æ–ø–∏—Å–∞–Ω–∏–µ.*$/i, async (ctx, next) => {
  try {
    const description = ctx.message.text.slice(15);

    if (description.length > 50)
      return await ctx.reply(
        "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤)"
      );

    const fam = await getFamilyByUserId(ctx.from.id);
    if (!fam) return await ctx.reply("–£ —Ç–µ–±—è –Ω–µ—Ç —Å–µ–º—å–∏ üò¢");
    const rang = await getRang(ctx.from.id, fam.id);
    if (rang != 5)
      return await ctx.reply("–¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ üëë");

    fam.description = description;
    await fam.save();
    await ctx.reply("–û—Ç–ª–∏—á–Ω–æ, –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ–º—å–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ");
    return next();
  } catch (error) {
    console.log(error);
  }
});

famModule.hears(/^—Å–µ–º—å—è –ø—Ä–æ—Ü–µ–Ω—Ç.*$/i, async (ctx, next) => {
  try {
    const percent = Number(ctx.message.text.slice(14));
    if (isNaN(percent) || percent > 20 || percent < 0)
      return await ctx.reply("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 20");
    const fam = await getFamilyByUserId(ctx.from.id);
    if (!fam) return await ctx.reply("–£ —Ç–µ–±—è –Ω–µ—Ç —Å–µ–º—å–∏ üò¢");
    const rang = await getRang(ctx.from.id, fam.id);
    if (rang != 5)
      return await ctx.reply(
        "–¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Å–æ —Å–±–æ—Ä–∞ —Ñ–µ—Ä–º—ã üëë"
      );

    fam.percent = percent;
    await fam.save();
    await ctx.reply(
      `–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –∫–æ–º–º–∏—Å–∏—è, –∫–æ—Ç–æ—Ä–∞—è —É–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Å–æ —Å–±–æ—Ä–∞ —Ñ–µ—Ä–º—ã, —Ä–∞–≤–Ω—è–µ—Ç—Å—è ${percent}%`
    );
    return next();
  } catch (error) {
    console.log(error);
  }
});

famModule.hears(/^—Å–µ–º—å—è —Å–Ω—è—Ç—å —Å—Ç–∞—Ä.*$/i, async (ctx, next) => {
  try {
    const amountText = ctx.message.text.split(" ")[3];
    const fam = await getFamilyByUserId(ctx.from.id);
    if (!fam) return await ctx.reply("–£ —Ç–µ–±—è –Ω–µ—Ç —Å–µ–º—å–∏ üò¢");
    const rang = await getRang(ctx.from.id, fam.id);
    if (rang != 5)
      return await ctx.reply("–¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–Ω–∏–º–∞—Ç—å —Å—Ç–∞—Ä–∫–∏ üëë");

    let ammount;
    if (
      amountText.toLowerCase() === "–≤—Å–µ" ||
      amountText.toLowerCase() === "–≤—Å—ë"
    ) {
      ammount = fam.mef;
    } else {
      ammount = Number(amountText);
      if (isNaN(ammount) || ammount <= 0)
        return await ctx.reply("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0");
    }

    if (fam.mef < ammount)
      return await ctx.reply("–í —Å–µ–º—å–µ –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä–æ–∫ üò¢");

    ctx.state.user.balance += ammount;
    fam.mef -= ammount;
    await fam.save();
    await ctx.reply(`–¢—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª ${separateNumber(ammount)} —Å—Ç–∞—Ä–æ–∫ ‚≠êÔ∏è`);
    return next();
  } catch (error) {
    console.log(error);
  }
});

famModule.hears(/^—Å–µ–º—å—è —Å–Ω—è—Ç—å –º–æ–Ω–µ—Ç—ã.*$/i, async (ctx, next) => {
  try {
    const amountText = ctx.message.text.split(" ")[3];
    const fam = await getFamilyByUserId(ctx.from.id);
    if (!fam) return await ctx.reply("–£ —Ç–µ–±—è –Ω–µ—Ç —Å–µ–º—å–∏ üò¢");
    const rang = await getRang(ctx.from.id, fam.id);
    if (rang != 5)
      return await ctx.reply("–¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–Ω–∏–º–∞—Ç—å –º–æ–Ω–µ—Ç—ã üëë");

    let ammount;
    if (
      amountText.toLowerCase() === "–≤—Å–µ" ||
      amountText.toLowerCase() === "–≤—Å—ë"
    ) {
      ammount = fam.balance;
    } else {
      ammount = Number(amountText);
      if (isNaN(ammount) || ammount <= 0)
        return await ctx.reply("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0");
    }

    if (fam.balance < ammount)
      return await ctx.reply("–í —Å–µ–º—å–µ –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç üò¢");

    ctx.state.user.famMoney += ammount;
    fam.balance -= ammount;
    await fam.save();
    await ctx.reply(`–¢—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª ${separateNumber(ammount)} –º–æ–Ω–µ—Ç ü™ô`);
    return next();
  } catch (error) {
    console.log(error);
  }
});

famModule.hears(/^—Å–µ–º—å—è –≥–∞–ª–æ—á–∫–∞/i, async (ctx) => {
  try {
    const fam = await getFamilyByUserId(ctx.from.id);
    await ctx.reply(
      `${
        fam.check
          ? `–£ —Å–µ–º—å–∏ —É–∂–µ –µ—Å—Ç—å –≥–∞–ª–æ—á–∫–∞ ‚úÖ`
          : "–£ —Å–µ–º—å–∏ –Ω–µ—Ç –≥–∞–ª–æ—á–∫–∏, —Ç—ã –µ–µ –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –∑–∞ 10.000.000 —Å—Ç–∞—Ä–æ–∫\n\n–ó–∞—á–µ–º –≥–∞–ª–æ—á–∫–∞?\n\n‚Ä¢ 2—Ö —Ä–µ–ø—É—Ç–∞—Ü–∏—è.\n\n‚Ä¢ –ö–∞–∂–¥—ã–π —á–∞—Å, –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–µ–º—å–∏ –ø–æ–ª—É—á–∞—é—Ç —Å–µ–º–µ–π–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–Ω–≥–∞(5 —Ä–∞–Ω–≥ 5 –º–æ–Ω–µ—Ç, 4 —Ä–∞–Ω–≥ 4 –º–æ–Ω–µ—Ç—ã –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ).\n\n‚Ä¢ +10 —Å–ª–æ—Ç–æ–≤ –µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.\n\n\nüìñ –°–µ–º—å—è –∫—É–ø–∏—Ç—å –≥–∞–ª–æ—á–∫—É"
      }`
    );
  } catch (error) {
    console.log(error);
  }
});

famModule.hears(/^—Å–µ–º—å—è –∫—É–ø–∏—Ç—å –≥–∞–ª–æ—á–∫—É/i, async (ctx, next) => {
  try {
    const fam = await getFamilyByUserId(ctx.from.id);
    if (!fam) return await ctx.reply("–£ —Ç–µ–±—è –Ω–µ—Ç —Å–µ–º—å–∏ üò¢");
    if (fam.check) return await ctx.reply("–£ —Ç–≤–æ–µ–π —Å–µ–º—å–∏ —É–∂–µ –µ—Å—Ç—å –≥–∞–ª–æ—á–∫–∞ ‚úÖ");
    await ctx.reply(
      ru_text.buy_check,
      Keyboard.inline([[Key.callback("–¢–æ—á–Ω–æ –∫—É–ø–∏—Ç—å", "check" + ctx.from.id)]])
    );

    return next();
  } catch (error) {
    console.log(error);
  }
});

famModule.hears(/^—Å–µ–º—å—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å/i, async (ctx, next) => {
  try {
    const fam = await getFamilyByUserId(ctx.from.id);
    const argument = ctx.message.text.split(" ")[2];
    if (!fam) return await ctx.reply("–£ —Ç–µ–±—è –Ω–µ—Ç —Å–µ–º—å–∏ üò¢");
    const rang = await getRang(ctx.from.id, fam.id);
    if (rang < 4)
      return await ctx.reply(
        "–¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –∑–∞–º—ã –º–æ–≥—É—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –≤ —Å–µ–º—å—é üò¢"
      );

    if (ctx.message.reply_to_message) {
      const userChatId = ctx.message.reply_to_message.from.id;
      const userFam = await getFamilyByUserId(userChatId);
      if (userFam)
        return await ctx.reply("–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —Å–µ–º—å—è");
      const isInvaited = await redisServise.get(
        `invite:${ctx.message.reply_to_message.from.id}`
      );
      if (isInvaited)
        return await ctx.reply("–Æ–∑–µ—Ä—É —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∑–∞—è–≤–∫—É, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ");
      await ctx.telegram.sendMessage(
        userChatId,
        `–°–µ–º—å—è ¬´${fam.name}¬ª —Ö–æ—á–µ—Ç –≤–∏–¥–µ—Ç—å –≤ —Ä—è–¥–∞—Ö —Å–≤–æ–∏—Ö —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤\n\n–í–≤–µ–¥–∏:\nüìñ<code>–°–µ–º—å—è –ø—Ä–∏–Ω—è—Ç—å</code>\nüìñ<code>–°–µ–º—å—è –æ—Ç–∫–ª–æ–Ω–∏—Ç—å</code>`,
        { parse_mode: "HTML" }
      );
      await redisServise.setInvite(
        ctx.message.reply_to_message.from.id,
        fam.id
      );
      return await ctx.reply("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚úÖ");
    }

    if (!argument) {
      return await ctx.reply(
        "–£–∫–∞–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ —Å–µ–º—å—é"
      );
    }

    if (argument.includes("@") && argument.length >= 5) {
      const user = await checkUserByUsername(argument.slice(1));
      if (!user)
        return await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç üò¢");
      const userFam = await getFamilyByUserId(user.chatId);
      if (userFam)
        return await ctx.reply("–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —Å–µ–º—å—è");
      const isInvaited = await redisServise.get(`invite:${user.chatId}`);
      if (isInvaited)
        return await ctx.reply("–Æ–∑–µ—Ä—É —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∑–∞—è–≤–∫—É, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ");
      await ctx.telegram.sendMessage(
        user.chatId,
        `–°–µ–º—å—è ¬´${fam.name}¬ª —Ö–æ—á–µ—Ç –≤–∏–¥–µ—Ç—å –≤ —Ä—è–¥–∞—Ö —Å–≤–æ–∏—Ö —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤\n\nüìñ<code>–°–µ–º—å—è –ø—Ä–∏–Ω—è—Ç—å</code>\nüìñ<code>–°–µ–º—å—è –æ—Ç–∫–ª–æ–Ω–∏—Ç—å</code>`,
        { parse_mode: "HTML" }
      );
      await redisServise.setInvite(user.chatId, fam.id);
      await ctx.reply("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚úÖ");
    }

    return next();
  } catch (error) {
    await ctx.reply(
      "–Ø –Ω–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —é–∑–µ—Ä –º–µ–Ω—è –∑–∞–±–∞–Ω–∏–ª ‚ùå"
    );
    console.log(error);
  }
});

famModule.hears(/^—Å–µ–º—å—è –ø—Ä–∏–Ω—è—Ç—å/i, async (ctx, next) => {
  try {
    const fam = await getFamilyByUserId(ctx.from.id);
    if (fam)
      return await ctx.reply("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —Å–µ–º—å—è, –∑–∞—á–µ–º —Ç–µ–±–µ –≤—Ç–æ—Ä–∞—è ü§î");
    const famId = await redisServise.get(`invite:${ctx.from.id}`);
    if (!famId) return await ctx.reply("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ —Å–µ–º—å—é ü•≤");
    const newFam = await getFamilyByFamId(famId);
    if (newFam.fullSlots >= newFam.slots)
      return await ctx.reply("–í —Å–µ–º—å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç ü•≤");
    await addUserToFamily(ctx.from.id, famId);
    newFam.fullSlots += 1;
    await redisServise.delete(`invite:${ctx.from.id}`);
    await newFam.save();
    await ctx.reply(
      `–¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´${newFam.name}¬ª`
    );
    return next();
  } catch (error) {
    console.log(error);
  }
});

famModule.hears(/^—Å–µ–º—å—è –æ—Ç–∫–ª–æ–Ω–∏—Ç—å/i, async (ctx, next) => {
  try {
    const famId = await redisServise.get(`invite:${ctx.from.id}`);
    if (!famId) return await ctx.reply("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ —Å–µ–º—å—é ü•≤");
    await redisServise.delete(`invite:${ctx.from.id}`);
    await ctx.reply("–¢—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ");
    return next();
  } catch (error) {
    console.log(error);
  }
});

famModule.hears(/^—Å–µ–º—å—è –∫–∏–∫/i, async (ctx, next) => {
  try {
    const argument = ctx.message.text.split(" ")[2];
    const fam = await getFamilyByUserId(ctx.from.id);
    if (!fam) return await ctx.reply("–£ —Ç–µ–±—è –Ω–µ—Ç —Å–µ–º—å–∏ üò¢");
    const rang = await getRang(ctx.from.id, fam.id);
    if (rang < 4)
      return await ctx.reply(
        "–¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –∑–∞–º—ã –º–æ–≥—É—Ç –∫–∏–∫–∞—Ç—å –∏–∑ —Å–µ–º—å–∏ üò¢"
      );

    if (ctx.message.reply_to_message) {
      const userChatId = ctx.message.reply_to_message.from.id;
      const userFam = await getFamilyByUserId(userChatId);
      if (!userFam || userFam.id != fam.id)
        return await ctx.reply("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–∑ –≤–∞—à–µ–π —Å–µ–º—å–∏");

      const userRang = await getRang(userChatId, fam.id);
      if (userRang > 3) {
        return await ctx.reply("5 –∏–ª–∏ 4 —Ä–∞–Ω–≥–∏ –Ω–µ–ª—å–∑—è –∫–∏–∫–∞—Ç—å ‚ùå");
      }
      await removeUserFromFamily(userChatId, fam.id);
      fam.fullSlots -= 1;
      await fam.save();
      await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∫–∏–∫–Ω—É—Ç –∏–∑ —Å–µ–º—å–∏ ‚ùå");
      return next();
    }

    if (!argument) {
      return await ctx.reply(
        "–£–∫–∞–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –∫–∏–∫–Ω—É—Ç—å –∏–∑ —Å–µ–º—å–∏"
      );
    }

    if (argument.includes("@") && argument.length >= 5) {
      const user = await checkUserByUsername(argument.slice(1));
      if (!user)
        return await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç üò¢");
      const userFam = await getFamilyByUserId(user.chatId);
      if (!userFam || userFam.id != fam.id)
        return await ctx.reply("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–∑ –≤–∞—à–µ–π —Å–µ–º—å–∏");

      const userRang = await getRang(user.chatId, fam.id);
      if (userRang > 3) {
        return await ctx.reply("5 –∏–ª–∏ 4 —Ä–∞–Ω–≥–∏ –Ω–µ–ª—å–∑—è –∫–∏–∫–∞—Ç—å ‚ùå");
      }
      await removeUserFromFamily(user.chatId, fam.id);
      fam.fullSlots -= 1;
      await fam.save();
      await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∫–∏–∫–Ω—É—Ç –∏–∑ —Å–µ–º—å–∏ ‚úÖ");
    }

    return next();
  } catch (error) {
    console.log(error);
  }
});

famModule.hears(/^—Å–µ–º—å—è –ø–æ–∫–∏–Ω—É—Ç—å/i, async (ctx, next) => {
  try {
    const fam = await getFamilyByUserId(ctx.from.id);
    if (!fam) return await ctx.reply("–£ —Ç–µ–±—è –Ω–µ—Ç —Å–µ–º—å–∏ üò≥");
    const rang = await getRang(ctx.from.id, fam.id);
    if (rang === 5)
      return await ctx.reply("–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—Ä–æ—Å–∏—Ç—å —Å–µ–º—å—é üò≥");

    await removeUserFromFamily(ctx.from.id, fam.id);
    fam.fullSlots -= 1;
    await fam.save();
    await ctx.reply("–¢—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª —Å–µ–º—å—é ‚úÖ");
    return next();
  } catch (error) {
    console.log(error);
  }
});

famModule.hears(/^—Å–µ–º—å—è –ø–æ–≤—ã—Å–∏—Ç—å/i, async (ctx, next) => {
  try {
    const argument = ctx.message.text.split(" ")[2];
    const fam = await getFamilyByUserId(ctx.from.id);
    if (!fam) return await ctx.reply("–£ —Ç–µ–±—è –Ω–µ—Ç —Å–µ–º—å–∏ üò¢");
    const rang = await getRang(ctx.from.id, fam.id);
    if (rang < 4)
      return await ctx.reply(
        "–¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –∑–∞–º—ã –º–æ–≥—É—Ç –ø–æ–≤—ã—à–∞—Ç—å —Ä–∞–Ω–≥ üò¢"
      );

    if (ctx.message.reply_to_message) {
      const userChatId = ctx.message.reply_to_message.from.id;
      if (ctx.from.id === userChatId)
        return await ctx.reply("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø–æ–≤—ã—Å–∏—Ç—å —Å–µ–±—è üò¢");
      const userFam = await getFamilyByUserId(userChatId);
      if (!userFam || userFam.id != fam.id)
        return await ctx.reply("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–∑ –≤–∞—à–µ–π —Å–µ–º—å–∏ üò≥");

      const zams = await getDeputies(fam.id);
      const userRang = await getRang(userChatId, fam.id);
      if (userRang === 4) {
        return await ctx.reply(
          "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥ üëë"
        );
      }

      if (rang === 4 && userRang === 3) {
        return await ctx.reply(
          "–°–Ω–∏–º–∞—Ç—å –∏ –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–π –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å üò¢"
        );
      }

      if (userRang === 3 && zams.length == 2) {
        return await ctx.reply("–í —Å–µ–º—å–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –¥–≤–∞ –∑–∞–º–∞ üëë");
      }

      await setRang(userChatId, fam.id, userRang + 1);
      await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ–≤—ã—à–µ–Ω üëë");
      return next();
    }

    if (argument.includes("@") && argument.length >= 5) {
      const user = await checkUserByUsername(argument.slice(1));
      if (!user)
        return await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç üò¢");
      if (ctx.from.id == user.chatId)
        return await ctx.reply("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø–æ–≤—ã—Å–∏—Ç—å —Å–µ–±—è üò¢");
      const userFam = await getFamilyByUserId(user.chatId);
      if (!userFam || userFam.id != fam.id)
        return await ctx.reply("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–∑ –≤–∞—à–µ–π —Å–µ–º—å–∏ üò≥");

      const zams = await getDeputies(fam.id);
      const userRang = await getRang(user.chatId, fam.id);
      if (userRang === 4) {
        return await ctx.reply(
          "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥ üëë"
        );
      }

      if (rang === 4 && userRang === 3) {
        return await ctx.reply(
          "–°–Ω–∏–º–∞—Ç—å –∏ –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–π –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å üò¢"
        );
      }

      if (userRang === 3 && zams.length == 2) {
        return await ctx.reply("–í —Å–µ–º—å–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –¥–≤–∞ –∑–∞–º–∞ üëë");
      }

      await setRang(user.chatId, fam.id, userRang + 1);
      await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ–≤—ã—à–µ–Ω üëë");
    }

    return next();
  } catch (error) {
    console.log(error);
  }
});

famModule.hears(/^—Å–µ–º—å—è –ø–æ–Ω–∏–∑–∏—Ç—å/i, async (ctx, next) => {
  try {
    const argument = ctx.message.text.split(" ")[2];
    const fam = await getFamilyByUserId(ctx.from.id);
    if (!fam) return await ctx.reply("–£ —Ç–µ–±—è –Ω–µ—Ç —Å–µ–º—å–∏ üò¢");
    const rang = await getRang(ctx.from.id, fam.id);
    if (rang < 4)
      return await ctx.reply(
        "–¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –∑–∞–º—ã –º–æ–≥—É—Ç –ø–æ–≤—ã—à–∞—Ç—å —Ä–∞–Ω–≥ üò¢"
      );

    if (ctx.message.reply_to_message) {
      const userChatId = ctx.message.reply_to_message.from.id;
      if (ctx.from.id === userChatId)
        return await ctx.reply("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø–æ–Ω–∏–∑–∏—Ç—å —Å–µ–±—è üò¢");
      const userFam = await getFamilyByUserId(userChatId);
      if (!userFam || userFam.id != fam.id)
        return await ctx.reply("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–∑ –≤–∞—à–µ–π —Å–µ–º—å–∏ üò≥");

      const userRang = await getRang(userChatId, fam.id);
      if (userRang === 1) {
        return await ctx.reply("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —Ç–∞–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–Ω–≥–∞ üò¢");
      }

      if (rang === 4 && userRang >= 4) {
        return await ctx.reply(
          "–°–Ω–∏–º–∞—Ç—å –∏ –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–π –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å üò¢"
        );
      }

      await setRang(userChatId, fam.id, userRang - 1);
      await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ–Ω–∏–∂–µ–Ω ‚úÖ");
      return next();
    }

    if (argument.includes("@") && argument.length >= 5) {
      const user = await checkUserByUsername(argument.slice(1));
      if (!user)
        return await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç üò¢");
      if (ctx.from.id == user.chatId)
        return await ctx.reply("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø–æ–Ω–∏–∑–∏—Ç—å —Å–µ–±—è üò¢");
      const userFam = await getFamilyByUserId(user.chatId);
      if (!userFam || userFam.id != fam.id)
        return await ctx.reply("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–∑ –≤–∞—à–µ–π —Å–µ–º—å–∏ üò≥");

      const userRang = await getRang(user.chatId, fam.id);
      if (userRang === 1) {
        return await ctx.reply("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —Ç–∞–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–Ω–≥–∞ üò¢");
      }

      if (rang === 4 && userRang >= 4) {
        return await ctx.reply(
          "–°–Ω–∏–º–∞—Ç—å –∏ –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–π –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å üò¢"
        );
      }
      await setRang(user.chatId, fam.id, userRang - 1);
      await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ–Ω–∏–∂–µ–Ω ‚úÖ");
    }

    return next();
  } catch (error) {
    console.log(error);
  }
});
famModule.hears(/^—Å–µ–º—å—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—Ç–∞—Ä.*$/i, async (ctx, next) => {
  try {
    const amountText = ctx.message.text.split(" ")[3];
    const fam = await getFamilyByUserId(ctx.from.id);
    if (!fam) return await ctx.reply("–£ —Ç–µ–±—è –Ω–µ—Ç —Å–µ–º—å–∏ üò¢");

    let ammount;
    if (
      amountText.toLowerCase() === "–≤—Å–µ" ||
      amountText.toLowerCase() === "–≤—Å—ë"
    ) {
      ammount = ctx.state.user.balance;
    } else {
      ammount = Number(amountText);
      if (isNaN(ammount) || ammount <= 0)
        return await ctx.reply("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0");
    }

    if (ctx.state.user.balance < ammount)
      return await ctx.reply("–£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä–æ–∫ üò¢");

    ctx.state.user.balance -= ammount;
    fam.mef += ammount;
    await fam.save();
    await ctx.reply(
      `–¢—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å —Å–µ–º—å–∏ –Ω–∞ ${separateNumber(
        ammount
      )} —Å—Ç–∞—Ä–æ–∫ ‚≠êÔ∏è`
    );
    return next();
  } catch (error) {
    console.log(error);
  }
});

famModule.hears(/^—Å–µ–º—å—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å –º–æ–Ω–µ—Ç—ã.*$/i, async (ctx, next) => {
  try {
    const amountText = ctx.message.text.split(" ")[3];
    const fam = await getFamilyByUserId(ctx.from.id);
    if (!fam) return await ctx.reply("–£ —Ç–µ–±—è –Ω–µ—Ç —Å–µ–º—å–∏ üò¢");

    let ammount;
    if (
      amountText.toLowerCase() === "–≤—Å–µ" ||
      amountText.toLowerCase() === "–≤—Å—ë"
    ) {
      ammount = ctx.state.user.famMoney;
    } else {
      ammount = Number(amountText);
      if (isNaN(ammount) || ammount <= 0)
        return await ctx.reply("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0");
    }

    if (ctx.state.user.famMoney < ammount)
      return await ctx.reply("–£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ —Å–µ–º–µ–π–Ω—ã—Ö –º–æ–Ω–µ—Ç üò¢");

    ctx.state.user.famMoney -= ammount;
    fam.balance += ammount;
    await fam.save();
    await ctx.reply(
      `–¢—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å —Å–µ–º—å–∏ –Ω–∞ ${separateNumber(
        ammount
      )} —Å–µ–º–µ–π–Ω—ã—Ö –º–æ–Ω–µ—Ç ü™ô`
    );
    return next();
  } catch (error) {
    console.log(error);
  }
});

famModule.hears(/^—Å–µ–º—å—è —É–ª—É—á—à–µ–Ω–∏—è/i, async (ctx, next) => {
  try {
    const fam = await getFamilyByUserId(ctx.from.id);
    if (!fam) return await ctx.reply("–£ —Ç–µ–±—è –Ω–µ—Ç —Å–µ–º—å–∏ üò¢");

    await ctx.reply(getBufsText(fam));

    return next();
  } catch (error) {
    console.log(error);
  }
});

famModule.hears(/^—Å–µ–º—å—è –∫—É–ø–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ.*$/i, async (ctx, next) => {
  try {
    const ammount = Number(ctx.message.text.split(" ")[3]);
    const fam = await getFamilyByUserId(ctx.from.id);
    if (!fam) return await ctx.reply("–£ —Ç–µ–±—è –Ω–µ—Ç —Å–µ–º—å–∏ üò¢");

    if (isNaN(ammount) || ammount <= 0 || ammount > 7)
      return await ctx.reply("–í–≤–µ–¥–∏ id —É–ª—É—á—à–µ–Ω–∏—è");

    if (ctx.state.user.balance < 1000000)
      return await ctx.reply("–£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä–æ–∫ üò¢");

    ctx.state.user.balance -= 1000000;

    switch (ammount) {
      case 1:
        if (fam.Baf.active === 5)
          return await ctx.reply(
            "–≠—Ç–æ —É–ª—É—á—à–µ–Ω–∏–µ —É–∂–µ –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å üí™"
          );

        fam.Baf.active += 1;
        await ctx.reply(
          `–ì–æ—Ç–æ–≤–æ, —Ç–µ–ø–µ—Ä—å —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–µ–º—å–∏ –ø–æ–ª—É—á–∞—é—Ç +${
            fam.Baf.active * 250
          } —Å—Ç–∞—Ä–æ–∫ –∫ –Ω–∞–≥—Ä–∞–¥–µ –∑–∞ –∞–∫—Ç–∏–≤ üéâ`
        );
        break;

      case 2:
        if (fam.Baf.luck === 5)
          return await ctx.reply(
            "–≠—Ç–æ —É–ª—É—á—à–µ–Ω–∏–µ —É–∂–µ –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å üí™"
          );

        fam.Baf.luck += 1;
        await ctx.reply(
          `–ì–æ—Ç–æ–≤–æ, —Ç–µ–ø–µ—Ä—å —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–µ–º—å–∏ –ø–æ–ª—É—á–∞—é—Ç +${fam.Baf.luck} –∫ —É–¥–∞—á–µ üéâ`
        );
        break;

      case 3:
        if (fam.Baf.craft === 5)
          return await ctx.reply(
            "–≠—Ç–æ —É–ª—É—á—à–µ–Ω–∏–µ —É–∂–µ –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å üí™"
          );

        fam.Baf.craft += 1;
        await ctx.reply(
          `–ì–æ—Ç–æ–≤–æ, —Ç–µ–ø–µ—Ä—å —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–µ–º—å–∏ –ø–æ–ª—É—á–∞—é—Ç +${fam.Baf.craft}% –∫ —É—Å–ø–µ—à–Ω–æ–º—É –∫—Ä–∞—Ñ—Ç—É üéâ`
        );
        break;

      case 4:
        if (fam.Baf.farm === 5)
          return await ctx.reply(
            "–≠—Ç–æ —É–ª—É—á—à–µ–Ω–∏–µ —É–∂–µ –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å üí™"
          );

        fam.Baf.farm += 1;
        await ctx.reply(
          `–ì–æ—Ç–æ–≤–æ, —Ç–µ–ø–µ—Ä—å —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–µ–º—å–∏ –ø–æ–ª—É—á–∞—é—Ç +${
            fam.Baf.farm * 100
          } —Å—Ç–∞—Ä–æ–∫ –∫ —Å–±–æ—Ä—É —Ñ–µ—Ä–º—ã üéâ`
        );
        break;

      case 5:
        if (fam.Baf.capcha === 5)
          return await ctx.reply(
            "–≠—Ç–æ —É–ª—É—á—à–µ–Ω–∏–µ —É–∂–µ –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å üí™"
          );

        fam.Baf.capcha += 1;
        await ctx.reply(
          `–ì–æ—Ç–æ–≤–æ, —Ç–µ–ø–µ—Ä—å —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–µ–º—å–∏ –ø–æ–ª—É—á–∞—é—Ç +${
            fam.Baf.capcha * 200
          } —Å—Ç–∞—Ä–æ–∫ –∑–∞ –≤–≤–æ–¥ –∫–∞–ø—á–∏ üéâ`
        );
        break;

      case 6:
        if (fam.Baf.invite === 5)
          return await ctx.reply(
            "–≠—Ç–æ —É–ª—É—á—à–µ–Ω–∏–µ —É–∂–µ –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å üí™"
          );

        fam.Baf.invite += 1;
        await ctx.reply(
          `–ì–æ—Ç–æ–≤–æ, —Ç–µ–ø–µ—Ä—å —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–µ–º—å–∏ –ø–æ–ª—É—á–∞—é—Ç +${
            fam.Baf.invite * 500
          } —Å—Ç–∞—Ä–æ–∫ –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —é–∑–µ—Ä–æ–≤ –≤ —á–∞—Ç üéâ`
        );
        break;

      case 7:
        if (fam.Baf.case === 2)
          return await ctx.reply(
            "–≠—Ç–æ —É–ª—É—á—à–µ–Ω–∏–µ —É–∂–µ –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å üí™"
          );

        fam.Baf.case += 1;
        await ctx.reply(
          `–ì–æ—Ç–æ–≤–æ, —Ç–µ–ø–µ—Ä—å —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–µ–º—å–∏ –º–æ–≥—É—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∑–∞ –æ–¥–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞ ${fam.Baf.case} –∫–µ–π—Å–∞ –±–æ–ª—å—à–µ üéâ`
        );
        break;

      default:
        break;
    }

    await fam.Baf.save();
    return next();
  } catch (error) {
    console.log(error);
  }
});

famModule.hears(/^—Å–µ–º—å—è —Ç–æ–ø/i, async (ctx, next) => {
  try {
    const fams = await getTopFams(10);

    const message = fams
      .map(
        (fam, index) =>
          `${index + 1}. ¬´${fam.name}¬ª ${fam.reputation} repüí´\n‚Ä¢ ${
            fam.description
          }`
      )
      .join("\n\n");

    await ctx.reply(`üèÜ –¢–æ–ø —Å–µ–º–µ–π üèÜ\n\n${message}`, {
      disable_notification: true,
      parse_mode: "HTML",
      disable_web_page_preview: true,
    });
    return next();
  } catch (error) {
    console.log(error);
  }
});

famModule.hears(/^—Å–µ–º—å—è —Å–æ—Å—Ç–∞–≤/i, async (ctx, next) => {
  try {
    const fam = await getFamilyByUserId(ctx.from.id);
    if (!fam) return await ctx.reply("–£ —Ç–µ–±—è –Ω–µ—Ç —Å–µ–º—å–∏ üò¢");
    const list = await getFamilyMembers(fam.id, fam.name);

    await ctx.reply(list, { parse_mode: "HTML", disable_notification: true });

    return next();
  } catch (error) {
    console.log(error);
  }
});

famModule.hears(/^—Å–µ–º—å—è —É–¥–∞–ª–∏—Ç—å/i, async (ctx, next) => {
  try {
    const fam = await getFamilyByUserId(ctx.from.id);
    if (!fam) return await ctx.reply("–£ —Ç–µ–±—è –Ω–µ—Ç —Å–µ–º—å–∏ üò¢");
    if (fam.owner != ctx.from.id)
      return await ctx.reply("–¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å–µ–º—å—é");

    if (ctx.chat.type !== "private")
      return await ctx.reply("–£–¥–∞–ª–∏—Ç—å —Å–µ–º—å—é –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª—Å");

    await ctx.telegram.sendMessage(
      fam.owner,
      "–¢–´ –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û –•–û–ß–ï–®–¨ –£–î–ê–õ–ò–¢–¨ –°–ï–ú–¨–Æ?\n\n–≠—Ç–æ –Ω–µ–æ–±—Ä–∞—Ç–∏–º—ã–π –ø—Ä–æ—Ü–µ—Å—Å...",
      Keyboard.inline([
        [Key.callback("–£–î–ê–õ–ò–¢–¨ –ù–ê–í–°–ï–ì–î–ê", "deleteFam")],
        [Key.callback("–ù–µ —É–¥–∞–ª—è—Ç—å", "dell")],
      ])
    );

    return next();
  } catch (error) {
    console.log(error);
  }
});

famModule.hears(/^—Å–µ–º—å—è –∫—É–ø–∏—Ç—å —Å–ª–æ—Ç/i, async (ctx, next) => {
  try {
    const fam = await getFamilyByUserId(ctx.from.id);
    if (!fam) return await ctx.reply("–£ —Ç–µ–±—è –Ω–µ—Ç —Å–µ–º—å–∏ üò¢");
    if (fam.owner != ctx.from.id)
      return await ctx.reply(
        "–¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å —Å–ª–æ—Ç—ã –≤ —Å–µ–º—å–µ"
      );

    if (fam.reputation < 50) {
      return await ctx.reply(
        "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å–ª–æ—Ç–∞ üò¢\n\n–ù—É–∂–Ω–æ 50 —Ä–µ–ø—É—Ç–∞—Ü–∏–∏"
      );
    }

    fam.reputation -= 50;
    fam.slots += 1;
    await ctx.reply(
      `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ —É–≤–µ–ª–∏—á–µ–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤ —Å–µ–º—å–µ ${fam.slots} —Å–ª–æ—Ç–æ–≤`
    );
    await fam.save();

    return next();
  } catch (error) {
    console.log(error);
  }
});

famModule.hears(/^–ø–µ—Ä–µ–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã.*$/i, async (ctx, next) => {
  const chatId = ctx.from.id;
  const message = ctx.message.reply_to_message;

  if (!message) {
    return;
  }

  const receiverChatId = message.from.id;
  const amount = parseInt(ctx.message.text.split(" ")[2]);

  if (isNaN(amount) || amount <= 0) {
    return;
  }

  if (message.from.is_bot) {
    await ctx.reply("–ó–∞—á–µ–º –±–æ—Ç—É —Å–µ–º–µ–π–Ω—ã–µ –º–æ–Ω–µ—Ç—ã üßê");
    return;
  }

  try {
    const sender = await getUser(chatId);
    const receiver = await getUser(receiverChatId);

    if (sender.famMoney < amount) {
      await ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–µ–º–µ–π–Ω—ã—Ö –º–æ–Ω–µ—Ç ü•≤");
      return;
    }

    if (sender.id === receiver.id) {
      await ctx.reply(`–ò–¥–∏ –Ω–∞—Ö—É–π, —Ç–∞–∫ –Ω–µ–ª—å–∑—èüñï`);
      return;
    }

    sender.famMoney -= amount;
    receiver.famMoney += amount;
    await sender.save();
    await receiver.save();
    await ctx.reply(
      `–¢—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–ª(–∞) ${separateNumber(amount)} —Å–µ–º–µ–π–Ω—ã—Ö –º–æ–Ω–µ—Ç ${
        message.from.first_name
      }`
    );
    return next();
  } catch (error) {
    console.log(error);
    await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏.");
  }
});

module.exports = famModule;
