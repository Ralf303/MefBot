import { Composer } from "telegraf";
import { getUser } from "../../db/functions.js";
import { getFamilyByUserId, deleteFam } from "./fam-service.js";

const famActions = new Composer();

famActions.action(/fam(\d+)/, async (ctx) => {
  try {
    const userId = ctx.match[1];

    await ctx.deleteMessage();
    const user = await getUser(userId);

    if (user.balance < 5000000) {
      return await ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–∞—Ä–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏ üò¢");
    }

    user.balance -= 5000000;
    await user.save();
    await ctx.reply(
      "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π —Å–µ–º—å–∏ ü™ß (–Ω–µ –±–æ–ª—å—à–µ 20 —Å–∏–º–≤–æ–ª–æ–≤)"
    );
    await ctx.scene.enter("famName");
  } catch (error) {
    console.log(error);
  }
});

famActions.action(/check(\d+)/, async (ctx) => {
  try {
    const userId = ctx.match[1];

    if (userId != ctx.from.id) {
      return await ctx.answerCbQuery("–ù–µ —Ç—ã–∫–∞–π –∫—É–¥–∞ –Ω–µ —Å–ª–µ–¥—É–µ—Ç üò°");
    }

    await ctx.deleteMessage();
    const fam = await getFamilyByUserId(ctx.from.id);
    if (!fam) return await ctx.reply("–£ —Ç–µ–±—è –Ω–µ—Ç —Å–µ–º—å–∏ üò¢");
    if (fam.check) return await ctx.reply("–£ —Ç–≤–æ–µ–π —Å–µ–º—å–∏ —É–∂–µ –µ—Å—Ç—å –≥–∞–ª–æ—á–∫–∞ ‚úÖ");

    const user = await getUser(userId);

    if (user.balance < 10000000) {
      return await ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–∞—Ä–æ–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≥–∞–ª–æ—á–∫–∏ üò¢");
    }

    user.balance -= 10000000;
    fam.slots += 10;
    fam.check = true;
    await user.save();
    await fam.save();
    await ctx.reply(
      `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Å–µ–º—å—è ¬´${fam.name}¬ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∞ –≥–∞–ª–æ—á–∫—É üéâ`
    );
  } catch (error) {
    console.log(error);
  }
});

famActions.action(/deleteFam/, async (ctx) => {
  await ctx.deleteMessage();

  const fam = await getFamilyByUserId(ctx.chat.id);
  await deleteFam(fam.id);
  await ctx.reply(`–°–µ–º—å—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ üóë`);
});

export default famActions;
