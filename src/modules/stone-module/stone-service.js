const { Item } = require("../../db/models");
const { getRandomInt } = require("../../utils/helpers");

const upgradeItem = async (user, itemId) => {
  try {
    const hasItem = await Item.findOne({
      where: {
        userId: user.id,
        id: itemId,
      },
    });

    if (!hasItem) {
      return "–£ —Ç–µ–±—è –Ω–µ—Ç —ç—Ç–æ–π –≤–µ—â–∏ üò•";
    }

    if (user.stones === 0) {
      return "–£ —Ç–µ–±—è –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–∏–ª—å–Ω—ã—Ö –∫–∞–º–Ω–µ–π üò•";
    }

    if (hasItem.lvl === 10) {
      return "–≠—Ç–∞ –≤–µ—â—å —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è üí™";
    }

    const chance = getRandomInt(0, 100);

    let percent = 100 - (hasItem.lvl + 1) * 10;

    if (hasItem.lvl === 9) {
      percent = 1;
    }

    if (hasItem.lvl === 0) {
      percent = 90;
    }

    if (chance <= percent) {
      hasItem.lvl += 1;
      await hasItem.save();

      user.stones -= 1;
      await user.save();

      return `–¢—ã —É—Å–ø–µ—à–Ω–æ —É–ª—É—á—à–∏–ª ${hasItem.itemName} –¥–æ ${hasItem.lvl} —É—Ä–æ–≤–Ω—è üéâ`;
    } else {
      user.stones -= 1;
      await user.save();

      return "–¢—ã –Ω–µ —Å–º–æ–≥ —É–ª—É—á—à–∏—Ç—å –≤–µ—â—å, –∫–∞–º–µ–Ω—å —É—Ç–µ—Ä—è–Ω üò•";
    }
  } catch (error) {
    console.log(error);
  }
};

module.exports = {
  upgradeItem,
};
