const { getUser } = require("../../db/functions");
const { User } = require("../../db/models");
const { giveResoursesLog, loseLog } = require("../logs-module/globalLogs");

const giveCoins = async (ctx) => {
  const chatId = ctx.from.id;
  const message = ctx.message.reply_to_message;

  if (!message) {
    return;
  }

  const receiverChatId = message.from.id;
  const amount = parseInt(ctx.message.text.split(" ")[1]);

  if (isNaN(amount) || amount <= 0) {
    return;
  }

  // –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–º
  if (message.from.is_bot) {
    await ctx.reply("–ó–∞—á–µ–º –±–æ—Ç—É —Å—Ç–∞—Äüßê");
    return;
  }

  try {
    const sender = await getUser(chatId);
    let receiver = await getUser(receiverChatId);

    if (sender.balance < amount) {
      await ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–∞—Ä–æ–∫ü•≤");
      return;
    }

    if (sender.id === receiver.id) {
      await ctx.reply(`–ò–¥–∏ –Ω–∞—Ö—É–π, —Ç–∞–∫ –Ω–µ–ª—å–∑—èüñï`);
      return;
    }

    if (amount < 100) {
      await ctx.reply("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–¥–∞—á–∏ 100 —à—Ç—É–∫");
      return;
    }

    sender.balance -= amount;
    receiver.balance += amount;
    await sender.save();
    await receiver.save();
    await ctx.reply(
      `–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å—ã–ø–∞–ª–∏ ${amount} —à—Ç—É–∫ —Å—Ç–∞—Ä–æ–∫ <a href="tg://user?id=${receiver.chatId}">${receiver.firstname}</a>`,
      { parse_mode: "HTML" }
    );

    await loseLog(sender, "—Å—Ç–∞—Ä", "–ø–µ—Ä–µ–¥–∞—á–∞ –¥—Ä—É–≥–æ–º—É —é–∑–µ—Ä—É");
    await giveResoursesLog(sender, receiver, "—Å—Ç–∞—Ä", amount);
  } catch (error) {
    console.log(error);
    await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏.");
  }
};

module.exports = {
  giveCoins,
};
