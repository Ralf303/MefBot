import { getUser } from "../../db/functions.js";
import { resolveReceiver, separateNumber } from "../../utils/helpers.js";

const giveStars = async (ctx) => {
  const chatId = ctx.from.id;
  const textParts = ctx.message.text.split(" ");
  const amount = parseInt(textParts[1]);

  if (isNaN(amount) || amount <= 0) {
    return;
  }

  let receiver,
    viaUsername = false;

  try {
    const resolved = await resolveReceiver(ctx);
    receiver = resolved.receiver;
    viaUsername = resolved.transferredViaUsername;
  } catch (err) {
    switch (err.message) {
      case "BOT_REJECT":
        return ctx.reply("–ó–∞—á–µ–º –±–æ—Ç—É —Å—Ç–∞—Ä–∫–∏üßê");
      case "NO_TARGET":
        return ctx.reply("–°–¥–µ–ª–∞–π —Ä–µ–ø–ª–∞–π –∏–ª–∏ —É–∫–∞–∂–∏ @username.");
      case "NOT_FOUND":
        return ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      case "SELF_TRANSFER":
        return ctx.reply("–ò–¥–∏ –Ω–∞—Ö—É–π, —Ç–∞–∫ –Ω–µ–ª—å–∑—èüñï");
      default:
        console.error("resolveReceiver error:", err);
        return ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è.");
    }
  }

  try {
    const sender = await getUser(chatId);

    if (sender.balance < amount) {
      return ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–∞—Ä–æ–∫ü•≤");
    }

    if (amount < 100) {
      return ctx.reply("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–¥–∞—á–∏ 100 —Å—Ç–∞—Ä–æ–∫");
    }

    sender.balance -= amount;
    receiver.balance += amount;
    await sender.save();
    await receiver.save();

    await ctx.reply(
      `–¢—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å—ã–ø–∞–ª(–∞) ${separateNumber(amount)} —Å—Ç–∞—Ä–æ–∫ ` +
        `<a href="tg://user?id=${receiver.chatId}">${receiver.firstname}</a>`,
      { parse_mode: "HTML" }
    );

    if (viaUsername) {
      try {
        await ctx.telegram.sendMessage(
          receiver.chatId,
          `–¢–µ–±–µ –æ—Ç—Å—ã–ø–∞–ª–∏ ${separateNumber(amount)} —Å—Ç–∞—Ä–æ–∫ –æ—Ç ${
            ctx.from.first_name
          }`
        );
      } catch (e) {
        console.log("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", e.message);
      }
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ —Å—Ç–∞—Ä–æ–∫:", error);
    await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏.");
  }
};

export { giveStars };
