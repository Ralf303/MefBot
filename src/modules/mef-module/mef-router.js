import dotenv from "dotenv";
dotenv.config({
  path: process.env.NODE_ENV === "production" ? ".env.prod" : ".env.dev",
});
import { Composer } from "telegraf";
import { message } from "telegraf/filters";
import { Keyboard, Key } from "telegram-keyboard";
import {
  checkUserSub,
  checkUserProfile,
  separateNumber,
} from "../../utils/helpers.js";
import { giveStars } from "./mef-service.js";
import ru_text from "../../../ru_text.js";
import { userFerma } from "./ferma.js";

const mefRouter = new Composer();

mefRouter.on(message("text"), async (ctx, next) => {
  try {
    const userMessage = ctx.message.text.toLowerCase();
    const [word1] = userMessage.split(" ");

    if (userMessage == "–ø—Ä–æ—Ñ") {
      await checkUserProfile(ctx.state.user, ctx);
    }

    if (userMessage == "–º–∞–≥–∞–∑–∏–Ω" || userMessage == "üè¨ –º–∞–≥–∞–∑–∏–Ω üè¨") {
      try {
        await ctx.telegram.sendMessage(
          ctx.from.id,
          "–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å:",
          Keyboard.inline([
            ["–£–ª—É—á—à–µ–Ω–∏—è", "–í–µ—â–∏", "–ú–∞–π–Ω–∏–Ω–≥"],
            [Key.callback("ü§ë–î–æ–Ω–∞—Çü§ë", 4)],
            [Key.callback("–ó–∞–∫—Ä—ã—Ç—å", "dell")],
          ])
        );

        if (ctx.chat.type !== "private") {
          await ctx.replyWithHTML(
            '–ú–∞–≥–∞–∑–∏–Ω —É–∂–µ –æ—Ç–∫—Ä—ã—Ç –≤ <a href="https://t.me/PablMefBot">–õ–° –±–æ—Ç–∞</a>',
            {
              reply_to_message_id: ctx.message.message_id,
              disable_web_page_preview: true,
            }
          );
        }
      } catch (e) {
        await ctx.reply(ru_text.shop_err, {
          reply_to_message_id: ctx.message.message_id,
        });
      }
    }

    if (
      userMessage == "–º–æ–∏ —Å—Ç–∞—Ä–∫–∏" ||
      userMessage == "—Å—Ç–∞—Ä–∫–∏" ||
      userMessage == "–º–æ–∏ —Å—Ç–∞—Ä" ||
      userMessage == "—Å—Ç–∞—Ä" ||
      userMessage == "–±"
    ) {
      await ctx.reply(
        "–°—Ç–∞—Ä–∫–∏: " +
          separateNumber(ctx.state.user.balance) +
          "\n–ì–µ–º—ã: " +
          separateNumber(ctx.state.user.gems) +
          "\nBTC: " +
          separateNumber(ctx.state.user.coin) +
          "\n–°–µ–º–µ–π–Ω—ã–µ –º–æ–Ω–µ—Ç—ã: " +
          separateNumber(ctx.state.user.famMoney) +
          "\n–ò—Å–∫—Ä: " +
          separateNumber(ctx.state.user.donate)
        //+ "\n‚ùÑÔ∏è –°–Ω–µ–∂–∏–Ω–∫–∏: " +
        // separateNumber(ctx.state.user.snows)
      );
    }

    if (word1 == "–æ—Ç—Å—ã–ø–∞—Ç—å") {
      await giveStars(ctx);
    }

    if (userMessage == "—Ñ–µ—Ä–º–∞" || userMessage == "—Ñ–∞—Ä–º–∞") {
      const checkSub = await checkUserSub(
        ctx,
        Number(process.env.CHANNEL_ID),
        ctx.state.user.chatId
      );

      if (!checkSub) {
        await ctx.reply(ru_text.sub);
      } else {
        const message = await userFerma(ctx.state.user);

        await ctx.reply(message);
      }
    }

    return next();
  } catch (e) {
    await ctx.reply("–ö–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞, " + e);
  }
});

export default mefRouter;
