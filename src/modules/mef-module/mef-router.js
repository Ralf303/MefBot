require("dotenv").config({
  path: process.env.NODE_ENV === "production" ? ".env.prod" : ".env.dev",
});
const { Composer } = require("telegraf");
const { message } = require("telegraf/filters");
const { Keyboard, Key } = require("telegram-keyboard");

const {
  checkUserSub,
  checkUserProfile,
  separateNumber,
} = require("../../utils/helpers");
const { giveCoins } = require("./mef-service.js");
const ru_text = require("../../../ru_text.js");
const { userFerma } = require("./ferma.js");

const mefRouter = new Composer();

mefRouter.on(message("text"), async (ctx, next) => {
  try {
    const userMessage = ctx.message.text.toLowerCase();
    const [word1] = userMessage.split(" ");

    if (userMessage == "–ø—Ä–æ—Ñ") {
      await checkUserProfile(ctx.state.user, ctx);
    }

    if (userMessage == "–º–∞–≥–∞–∑–∏–Ω") {
      try {
        await ctx.telegram.sendMessage(
          ctx.from.id,
          "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:",
          Keyboard.inline([
            ["–£–ª—É—á—à–µ–Ω–∏—è", "–í–µ—â–∏", Key.callback("ü§ë–î–æ–Ω–∞—Çü§ë", 4)],
            [Key.callback("–ó–∞–∫—Ä—ã—Ç—å", "dell")],
          ])
        );

        if (ctx.chat.type !== "private") {
          await ctx.replyWithHTML(
            '–ú–∞–≥–∞–∑–∏–Ω —É–∂–µ –æ—Ç–∫—Ä—ã—Ç –≤ <a href="https://t.me/PablMefBot">–õ–° –±–æ—Ç–∞</a>',
            {
              reply_to_message_id: ctx.message.message_id,
              disable_web_page_preview: true,
            }
          );
        }
      } catch (e) {
        await ctx.reply(ru_text.shop_err, {
          reply_to_message_id: ctx.message.message_id,
        });
      }
    }

    if (
      userMessage == "–º–æ–π —Å—Ç–∞—Ä" ||
      userMessage == "—Å—Ç–∞—Ä" ||
      userMessage == "–±"
    ) {
      await ctx.reply(
        "–°—Ç–∞—Ä: " +
          separateNumber(ctx.state.user.balance) +
          "\n–ì–µ–º—ã: " +
          separateNumber(ctx.state.user.gems) +
          "\n–ö–ª—é—á–∏: " +
          separateNumber(ctx.state.user.chests)
      );
    }

    if (word1 == "–æ—Ç—Å—ã–ø–∞—Ç—å") {
      await giveCoins(ctx);
    }

    if (userMessage == "—Ñ–µ—Ä–º–∞" || userMessage == "—Ñ–∞—Ä–º–∞") {
      const checkSub = await checkUserSub(
        ctx,
        Number(process.env.CHANNEL_ID),
        ctx.state.user.chatId
      );

      if (!checkSub) {
        await ctx.reply(ru_text.sub);
      } else {
        await userFerma(ctx, ctx.state.user);
      }
    }

    return next();
  } catch (e) {
    await ctx.reply("–ö–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞, " + e);
  }
});

module.exports = mefRouter;
