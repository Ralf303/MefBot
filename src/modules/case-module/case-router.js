const { Composer } = require("telegraf");
const { message } = require("telegraf/filters");

const cases = require("./cases");
const { getUser, getChat, syncUserCaseToDb } = require("../../db/functions");
const { getCaseInfo, getUserCase } = require("./case-utils/case-tool-service");
const {
  buyCase,
  openCase,
  openDonateCase,
} = require("./case-utils/open-case-service");
const ru_text = require("../../../ru_text");
const { giveCase, giveDonateCase } = require("./case-utils/give-case-service");
const caseRouter = new Composer();

caseRouter.on(message("text"), async (ctx, next) => {
  try {
    const userMessage = ctx.message.text.toLowerCase();
    const [word1, word2, word3, word4] = userMessage.split(" ");
    let chat;
    if (ctx.chat.type !== "private") {
      chat = await getChat(ctx.chat.id);
    }

    const isSpam = chat?.allowCase === true || ctx.chat.type === "private";

    if (userMessage == "–º–æ–∏ —Å—Ç–∞—Ä–∫–µ–π—Å—ã") {
      await syncUserCaseToDb(ctx.state.user.id);
      const userCase = await getUserCase(ctx.state.user.id);
      let result = "–¢–≤–æ–∏ —Å—Ç–∞—Ä–∫–µ–π—Å—ã:\n";
      let i = 1;
      for (const item in cases) {
        result += `${i}) ${cases[item].name} - ${
          userCase[cases[item].dbName]
        } —à—Ç.\n`;
        i++;
      }
      await ctx.reply(
        result +
          "\nüí∞–î–æ–Ω–∞—Ç –∫–µ–π—Å - " +
          userCase.donate +
          "—à—Çüí∞\n\nüìñ–û—Ç–∫—Ä—ã—Ç—å id\nüìñ–û—Ç–∫—Ä—ã—Ç—å –¥–æ–Ω–∞—Ç\nüìñ–ü–µ—Ä–µ–¥–∞—Ç—å —Å—Ç–∞—Ä–∫–µ–π—Å id\nüìñ–ü–µ—Ä–µ–¥–∞—Ç—å —Å—Ç–∞—Ä–∫–µ–π—Å –¥–æ–Ω–∞—Ç"
      );
    }

    if (word1 == "–ø–µ—Ä–µ–¥–∞—Ç—å") {
      const id = Number(word3);
      const count =
        isNaN(Number(word4)) || Number(word4) < 1 ? 1 : Number(word4);

      if (word2 == "—Å—Ç–∞—Ä–∫–µ–π—Å" && !isNaN(id)) {
        await giveCase(ctx.state.user, id, count, ctx);
      }

      if (word2 == "—Å—Ç–∞—Ä–∫–µ–π—Å" && word3 === "–¥–æ–Ω–∞—Ç") {
        await giveDonateCase(ctx.state.user, word3, count, ctx);
      }
    }

    if (userMessage == "–∏–Ω—Ñ–∞ —Å—Ç–∞—Ä–∫–µ–π—Å –¥–æ–Ω–∞—Ç") {
      await ctx.reply(
        "‚ùóÔ∏è–î–æ–Ω–∞—Ç –∫–µ–π—Å‚ùóÔ∏è\n\n–í—ã–ø–∞–¥–∞–µ—Ç –ª—é–±–∞—è —Å–ª—É—á–∞–π–Ω–∞—è –≤–µ—â—å, –æ—Ç –æ–±—ã—á–Ω—ã—Ö –¥–æ –¥–æ–Ω–∞—Ç–Ω—ã—Ö"
      );
    }

    if (word1 == "–∫—É–ø–∏—Ç—å") {
      const id = Number(word3);
      const count =
        isNaN(Number(word4)) || Number(word4) < 1 ? 1 : Number(word4);

      if (word2 == "—Å—Ç–∞—Ä–∫–µ–π—Å" && !isNaN(id)) {
        await buyCase(ctx.state.user, id, count, ctx);
      }
    }

    if (word1 == "–∏–Ω—Ñ–æ" || word1 == "–∏–Ω—Ñ–∞") {
      if (word2 == "—Å—Ç–∞—Ä–∫–µ–π—Å" && !isNaN(Number(word3))) {
        getCaseInfo(Number(word3), ctx);
      }
    }

    if (word1 == "–æ—Ç–∫—Ä—ã—Ç—å" && isSpam) {
      const id = Number(word2);
      const count =
        isNaN(Number(word3)) || Number(word3) < 1 ? 1 : Number(word3);

      if (word2 === "–¥–æ–Ω–∞—Ç") {
        await openDonateCase(ctx.state.user, ctx);
      }

      if (!isNaN(id)) {
        await openCase(ctx.state.user, id, ctx, count);
      } else if (word1 == "–æ—Ç–∫—Ä—ã—Ç—å") {
        await ctx.reply(
          "–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã\n\n–ü–æ–ø—Ä–æ–±—É–π\n–û—Ç–∫—Ä—ã—Ç—å id [–∫–æ–ª-–≤–æ]"
        );
      }
    } else if (word1 == "–æ—Ç–∫—Ä—ã—Ç—å") {
      await ctx.reply(ru_text.no_case_in_chat);
    }

    if (userMessage == "—Å—Ç–∞—Ä–∫–µ–π—Å—ã" && isSpam) {
      let result = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–µ–π—Å—ã:\n";
      let i = 1;
      for (const item in cases) {
        let price = cases[item].price;
        if (cases[item].class) {
          price += ` –≥–µ–º–æ–≤`;
        } else {
          price += ` —Å—Ç–∞—Ä–æ–∫`;
        }
        result += `${i}) ${cases[item].name} –¶–µ–Ω–∞: ${price}\n`;
        i++;
      }
      await ctx.reply(
        result + "\nüìñ–ö—É–ø–∏—Ç—å —Å—Ç–∞—Ä–∫–µ–π—Å id [–∫–æ–ª-–≤–æ]\nüìñ–ò–Ω—Ñ–∞ —Å—Ç–∞—Ä–∫–µ–π—Å id"
      );
    } else if (userMessage == "—Å—Ç–∞—Ä–∫–µ–π—Å—ã") {
      await ctx.reply(ru_text.no_case_in_chat);
    }

    return next();
  } catch (e) {
    await ctx.reply("–ö–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞, " + e);
  }
});

module.exports = caseRouter;
