const { Case } = require("../../../db/models");
const cases = require("../cases");
const items = require("../../items-module/items");
const { resiveLog, loseLog } = require("../../logs-module/globalLogs");
const { getRandomInt } = require("../../../utils/helpers");
const { getUserCase } = require("./case-tool-service");
const {
  createItem,
  checkItem,
} = require("../../items-module/items-utils/item-tool-service");
const redisServise = require("../../../services/redis-servise");
const { syncUserCaseToDb } = require("../../../db/functions");
const { Keyboard, Key } = require("telegram-keyboard");

const openDonateCase = async (user, ctx) => {
  try {
    const userCase = await getUserCase(user.id);
    if (userCase.donate === 0) {
      await ctx.reply(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–∞—Ä–∫–µ–π—Å–æ–≤üò•`);
      return;
    }

    userCase.donate--;
    await userCase.save();

    let result = `${user.username} –æ—Ç–∫—Ä—ã–ª –î–æ–Ω–∞—Ç –∫–µ–π—Å –∏ –ø–æ–ª—É—á–∏–ª`;
    const randomItem =
      Math.floor(Math.random() * Object.keys(items).length) + 1;
    const item = await createItem(randomItem);

    user.fullSlots++;
    await user.addItem(item);
    await ctx.reply(`‚ùóÔ∏è@${result} ${item.itemName}‚ùóÔ∏è`);
    await resiveLog(user, `${item.itemName}`, `1`, "–ø—Ä–∏–∑ –∏–∑ –∫–µ–π—Å–∞");
    await user.save();
    await item.save();
    await ctx.telegram.sendMessage(
      process.env.CHAT_ID,
      `‚ùóÔ∏è<a href="tg://user?id=${user.chatId}">${user.firstname}</a> –∏—Å–ø—ã—Ç–∞–ª —É–¥–∞—á—É –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –î–æ–Ω–∞—Ç –∫–µ–π—Å–∞ –∏ –≤—ã–±–∏–ª ${item.itemName}‚ùóÔ∏è`,
      {
        parse_mode: "HTML",
      }
    );
  } catch (error) {
    console.log(error);
  }
};

const open = async (user, ctx, box, luck) => {
  let result = ``;
  try {
    let chance = getRandomInt(0, 5000);
    chance -= luck;

    if (chance <= 499) {
      const win = getRandomInt(1, 250);
      user.balance += win;
      result += `${win} —Å—Ç–∞—Ä–æ–∫üåø`;
      await resiveLog(user, "—Å—Ç–∞—Ä", win, "–ø—Ä–∏–∑ –∏–∑ –∫–µ–π—Å–∞");
    }

    if (chance >= 500 && chance <= 505 && user.slots < 200) {
      const randomItem = getRandomInt(0, box.itemsId.length - 1);
      const item = await createItem(box.itemsId[randomItem]);

      user.fullSlots++;
      await user.addItem(item);
      await resiveLog(user, item.itemName, 1, "–ø—Ä–∏–∑ –∏–∑ –∫–µ–π—Å–∞");
      await item.save();
      await user.save();
      result = `‚ùóÔ∏è${item.itemName}‚ùóÔ∏è`;
      await ctx.telegram.sendMessage(
        user.chatId,
        `‚ùóÔ∏è–¢—ã –∏—Å–ø—ã—Ç–∞–ª —É–¥–∞—á—É –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ ${box.name} –∏ –≤—ã–±–∏–ª ${item.itemName}‚ùóÔ∏è`,
        Keyboard.inline([[`–£–¥–∞–ª–∏—Ç—å –≤–µ—â—å ${item.id}`]])
      );
      return result;
    } else if (chance >= 500 && chance <= 505 && user.slots === 200) {
      const win = getRandomInt(250, 1000);
      user.balance += win;
      result += `${win} —Å—Ç–∞—Ä–æ–∫üåø`;
      await resiveLog(user, "—Å—Ç–∞—Ä", win, "–ø—Ä–∏–∑ –∏–∑ –∫–µ–π—Å–∞");
    }

    if (chance >= 506 && chance <= 1500) {
      const win = getRandomInt(250, 1000);
      user.balance += win;
      result += `${win} —Å—Ç–∞—Ä–æ–∫üåø`;
      await resiveLog(user, "—Å—Ç–∞—Ä", win, "–ø—Ä–∏–∑ –∏–∑ –∫–µ–π—Å–∞");
    }

    if (chance === 1501 && user.slots === 200) {
      const item = await createItem(100);
      user.fullSlots++;
      await user.addItem(item);
      await resiveLog(user, item.itemName, 1, "–ø—Ä–∏–∑ –∏–∑ –∫–µ–π—Å–∞");
      await item.save();
      await user.save();
      result = `‚ùóÔ∏è${item.itemName}‚ùóÔ∏è`;
      await ctx.telegram.sendMessage(
        user.chatId,
        `‚ùóÔ∏è–¢—ã –∏—Å–ø—ã—Ç–∞–ª —É–¥–∞—á—É –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ ${box.name} –∏ –≤—ã–±–∏–ª ${item.itemName}‚ùóÔ∏è`,
        Keyboard.inline([["–£–¥–∞–ª–∏—Ç—å –≤–µ—â—å"]])
      );
      return result;
    } else if (chance === 1501 && user.slots === 200) {
      user.balance += 25000;
      result += `${win} —Å—Ç–∞—Ä–æ–∫üåø`;
      await resiveLog(user, "—Å—Ç–∞—Ä", win, "–ø—Ä–∏–∑ –∏–∑ –∫–µ–π—Å–∞");
    }

    if (chance >= 1502 && chance <= 1550) {
      const win = getRandomInt(1, 25);
      user.gems += win;
      result += `${win} –≥–µ–º–æ–≤üíé`;
      await resiveLog(user, "–≥–µ–º—ã", win, "–ø—Ä–∏–∑ –∏–∑ –∫–µ–π—Å–∞");
    }

    if (chance >= 1551 && chance <= 1585 && user.slots < 200) {
      user.slots += 1;
      result += `+1 –°–õ–û–¢ –í –ò–ù–í–ï–ù–¢–ê–†–¨üéí`;
      await resiveLog(user, "—Å–ª–æ—Ç—ã", 1, "–ø—Ä–∏–∑ –∏–∑ –∫–µ–π—Å–∞");
    } else if (chance >= 1551 && chance <= 1585 && user.slots === 200) {
      const win = getRandomInt(250, 1000);
      user.balance += win;
      result += `${win} —Å—Ç–∞—Ä–æ–∫üåø`;
      await resiveLog(user, "—Å—Ç–∞—Ä", win, "–ø—Ä–∏–∑ –∏–∑ –∫–µ–π—Å–∞");
    }

    if (chance > 1586) {
      result += "–ù–∏—á–µ–≥–æüò•";
    }

    await user.save();
    return result;
  } catch (error) {
    console.log(error);
    return result;
  }
};

/*****************************************************************************************************/
/*****************************************************************************************************/
/*****************************************************************************************************/
/*****************************************************************************************************/
/*****************************************************************************************************/
/*****************************************************************************************************/
/*****************************************************************************************************/
/*****************************************************************************************************/
/*****************************************************************************************************/
/*****************************************************************************************************/
/*****************************************************************************************************/
/*****************************************************************************************************/
/*****************************************************************************************************/
/*****************************************************************************************************/
/*****************************************************************************************************/
/*****************************************************************************************************/
/*****************************************************************************************************/
/*****************************************************************************************************/
/*****************************************************************************************************/
/*****************************************************************************************************/
/*****************************************************************************************************/
//–§–£–ù–ö–¶–ò–Ø –ü–û–ö–£–ü–ö–ò –õ–Æ–ë–û–ì–û –ö–ï–ô–°–ê
const buyCase = async (user, id, count, ctx) => {
  const needCase = cases[id];
  await syncUserCaseToDb(user.id);
  const userCase = await getUserCase(user.id);

  if (needCase) {
    let price = needCase.price;
    if (!isNaN(count) && count > 0) {
      price *= count;
    } else {
      count = 1;
    }

    if (user.balance < price && needCase.class !== "gem") {
      await ctx.reply(`–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–∞—Ä–æ–∫üò•`);
      return;
    } else if (needCase.class !== "gem") {
      user.balance -= price;
      await loseLog(
        user,
        "—Å—Ç–∞—Ä",
        `–ø–æ–∫—É–ø–∫–∞ ${needCase.name} –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ ${count}`
      );

      await resiveLog(
        user,
        `${needCase.name}`,
        `${count}`,
        "–ø–æ–∫—É–ø–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ"
      );
    }

    if (user.gems < price && needCase.class === "gem") {
      await ctx.reply(`–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–º–æ–≤üò•`);
      return;
    } else if (needCase.class === "gem") {
      user.gems -= price;
      await loseLog(
        user,
        "–≥–µ–º—ã",
        `–ø–æ–∫—É–ø–∫–∞ ${needCase.name} –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ ${count}`
      );

      await resiveLog(
        user,
        `${needCase.name}`,
        `${count}`,
        "–ø–æ–∫—É–ø–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ"
      );
    }
    userCase[needCase.dbName] += Number(count);
    await userCase.save();
    await user.save();

    await ctx.reply(
      `–£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω ${needCase.name} –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ ${count} –∑–∞ ${price}`
    );
  } else {
    await ctx.reply(`–¢–∞–∫–æ–≥–æ —Å—Ç–∞—Ä–∫–µ–π—Å–∞ –Ω–µ—Çüò•`);
  }
};

/*****************************************************************************************************/
/*****************************************************************************************************/
/*****************************************************************************************************/
//–¢–£–¢ –§–£–ù–ö–¶–ò–Ø –û–¢–ö–†–´–¢–ò–Ø –ö–ï–ô–°–ê –û–ù–ê –í–ê–©–ï –í–ê–ñ–ù–ê–Ø

const openCase = async (user, id, ctx, count = 1) => {
  try {
    const needCase = cases[id];
    if (!needCase) {
      await ctx.reply("–¢–∞–∫–æ–≥–æ —Å—Ç–∞—Ä–∫–µ–π—Å–∞ –Ω–µ—Çüò•");
      return;
    }

    const caseName = needCase.dbName;
    let userCase = await redisServise.get(user.id + "cases");

    if (!userCase) {
      userCase = await getUserCase(user.id);
      await redisServise.set(user.id + "cases", JSON.stringify(userCase));
    } else {
      userCase = JSON.parse(userCase);
    }

    if (userCase[caseName] < count) {
      return await ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–∞—Ä–∫–µ–π—Å–æ–≤üò•");
    }

    const isYesMane = await checkItem(user.id, "–ô–µ—Å-–º—ç–Ω");

    if ((!isYesMane && Number(count) > 1) || Number(count) >= 4) {
      await ctx.reply("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç–æ–ª—å–∫–æ –∑–∞ —Ä–∞–∑üò•");
      return;
    }

    userCase[caseName] -= count;
    await redisServise.set(user.id + "cases", JSON.stringify(userCase));
    let results = [];
    let luck = 0;
    const pupsItem = await checkItem(user.id, "–ü—É–ø—Å ¬´–£–¥–∞—á–∞¬ª");

    if (pupsItem) {
      luck += 1000;
    }
    for (let i = 0; i < count; i++) {
      const result = await open(user, ctx, needCase, luck);
      results.push("‚Ä¢ " + result);
    }
    await loseLog(user, user[caseName], "–æ—Ç–∫—Ä—ã—Ç–∏–µ");
    await ctx.reply(
      `–¢—ã –æ—Ç–∫—Ä—ã–ª ${count} —Å—Ç–∞—Ä–∫–µ–π—Å–∞ –∏ –ø–æ–ª—É—á–∏–ª(–∞):\n\n${results.join("\n")}`
    );
  } catch (error) {
    console.log(error);
  }
};

module.exports = { openCase, buyCase, openDonateCase };
