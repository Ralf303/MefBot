import { Composer } from "telegraf";
import { getUser } from "../../db/functions.js";
import { separateNumber } from "../../utils/helpers.js";
import { Keyboard, Key } from "telegram-keyboard";
import { getHomeByUserId } from "./home-service.js";

const homeActions = new Composer();

homeActions.action(/^homeSell/, async (ctx) => {
  try {
    await ctx.deleteMessage();
    const [_, senderId, receiverId, price] = ctx.callbackQuery.data.split(" ");
    const receiver = await getUser(receiverId);
    const sender = await getUser(senderId);

    const senderHome = await getHomeByUserId(sender.id);

    if (!senderHome) {
      return await ctx.reply(`–ü—Ä–æ–¥–∞–≤–µ—Ü —É–∂–µ –ø—Ä–æ–¥–∞–ª –¥–æ–º üò•`);
    }

    const receiverHome = await getHomeByUserId(receiver.id);

    if (receiverHome) {
      return await ctx.reply(`–£ —Ç–µ–±—è –∏ —Ç–∞–∫ —É–∂–µ –µ—Å—Ç—å –¥–æ–º, –∑–∞—á–µ–º —Ç–µ–±–µ –≤—Ç–æ—Ä–æ–π üßê`);
    }

    if (receiver.balance < price) {
      return await ctx.reply(`–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–∞—Ä–æ–∫üò•`);
    }

    receiver.balance -= Number(price);
    sender.balance += Number(price);

    senderHome.userId = receiver.id;

    await sender.save();
    await receiver.save();
    await senderHome.save();

    await ctx.reply(
      `–¢—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª(–∞) ${senderHome.name} –∑–∞ ${separateNumber(
        price
      )} —Å—Ç–∞—Ä–æ–∫`
    );
    await ctx.telegram.sendMessage(
      sender.chatId,
      `–¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª(–∞) ${senderHome.name} –∑–∞ ${separateNumber(
        price
      )} —Å—Ç–∞—Ä–æ–∫`,
      { parse_mode: "HTML" }
    );
  } catch (error) {
    console.log(error);
  }
});

homeActions.action("cancel", async (ctx) => {
  try {
    await ctx.deleteMessage();
    await ctx.reply("–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
  } catch (error) {
    console.log(error);
  }
});

export default homeActions;
