const { Composer } = require("telegraf");
const { message } = require("telegraf/filters");
const { getHomeByUserId, sellHome } = require("./home-service");

const homeRouter = new Composer();

homeRouter.on(message("text"), async (ctx, next) => {
  try {
    const userMessage = ctx.message.text.toLowerCase();
    const isHome = await getHomeByUserId(ctx.state.user.id);
    if (!isHome) return next();
    const [word1, word2, word3] = userMessage.split(" ");

    if (userMessage == "–æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–æ–≥") {
      const { balance } = ctx.state.user;
      const { tax } = isHome;

      if (tax === 0) {
        await ctx.reply("–¢—ã —É–∂–µ –≤—Å–µ –æ–ø–ª–∞—Ç–∏–ª üëç");
      }

      if (balance < tax) {
        await ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–ª–æ–≥–∞ ü•≤");
        return next();
      }

      if (balance >= tax) {
        await ctx.reply("–¢—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª –Ω–∞–ª–æ–≥ üí∏");
        ctx.state.user.balance -= tax;
        isHome.tax = 0;
      }
    }

    if (userMessage == "–æ–ø–ª–∞—Ç–∏—Ç—å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ") {
      const { balance } = ctx.state.user;
      const { energy } = isHome;

      if (energy === 0) {
        await ctx.reply("–¢—ã —É–∂–µ –≤—Å–µ –æ–ø–ª–∞—Ç–∏–ª üëç");
      }

      if (balance < energy) {
        await ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞ ü•≤");
        return next();
      }

      if (balance >= energy) {
        await ctx.reply("–¢—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ üí∏");
        ctx.state.user.balance -= energy;
        isHome.energy = 0;
      }
    }

    if (
      word1 == "–ø—Ä–æ–¥–∞—Ç—å" &&
      word2 == "–¥–æ–º" &&
      ctx.message?.reply_to_message?.from
    ) {
      const price = Number(word3);
      if (!isNaN(price)) {
        const result = await sellHome(
          ctx.state.user,
          price,
          ctx.message?.reply_to_message?.from,
          ctx
        );

        await ctx.replyWithHTML(result);
      }
    }

    await isHome.save();
    return next();
  } catch (e) {
    await ctx.reply("–ö–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞, " + e);
  }
});

module.exports = homeRouter;
