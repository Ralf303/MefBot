import { Composer } from "telegraf";
import { getMineInfo } from "./mine-service.js";
import { resolveReceiver, separateNumber } from "../../utils/helpers.js";
import { getUser } from "../../db/functions.js";

const mineRouter = new Composer();

mineRouter.hears(/^–∫—É—Ä—Å$/i, async (ctx) => {
  const mineInfo = await getMineInfo();
  const user = ctx.state.user;
  const price = mineInfo.currency || 0;
  const bankBuyPrice = Math.trunc(price * 0.95);

  await ctx.replyWithHTML(
    `–í –±–∞–Ω–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ: <b>${separateNumber(
      mineInfo.coin
    )} ‚Çø</b>\n–£ —Ç–µ–±—è –µ—Å—Ç—å: <b>${separateNumber(
      user.coin
    )} ‚Çø</b>\n\n–ë–∞–Ω–∫ –ø—Ä–æ–¥–∞–µ—Ç –ø–æ –∫—É—Ä—Å—É: 1 ‚Çø = <b>${separateNumber(
      price
    )} –°—Ç–∞—Ä</b>\n–ë–∞–Ω–∫ –ø–æ–∫—É–ø–∞–µ—Ç –ø–æ –∫—É—Ä—Å—É: 1 ‚Çø = <b>${separateNumber(
      bankBuyPrice
    )} –°—Ç–∞—Ä</b>\n\nüìñ–ö—Ä–∏–ø—Ç–∞ –∫—É–ø–∏—Ç—å [–∫–æ–ª-–≤–æ]\nüìñ–ö—Ä–∏–ø—Ç–∞ –ø—Ä–æ–¥–∞—Ç—å [–∫–æ–ª-–≤–æ]\nüìñ–ö—Ä–∏–ø—Ç–∞ –ø–µ—Ä–µ–¥–∞—Ç—å [–∫–æ–ª-–≤–æ]`
  );
});

mineRouter.hears(/^–∫—Ä–∏–ø—Ç–∞ –∫—É–ø–∏—Ç—å.*$/i, async (ctx) => {
  const amountText = ctx.message.text.split(" ")[2];
  const amount = Number(amountText);

  if (isNaN(amount) || amount <= 0) {
    return ctx.reply("‚ùå –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC –¥–ª—è –ø–æ–∫—É–ø–∫–∏");
  }

  const user = ctx.state.user;
  const mineInfo = await getMineInfo();
  const price = mineInfo.currency || 0;
  const totalCost = Math.floor(amount * price);

  if (user.balance < totalCost) {
    return ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–∞—Ä–æ–∫üò¢");
  }

  if (mineInfo.coin < amount) {
    return ctx.reply("‚ùå –í –±–∞–Ω–∫–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BTC");
  }

  user.balance -= totalCost;
  user.coin += amount;
  mineInfo.coin -= amount;

  await user.save();
  await mineInfo.save();

  await ctx.replyWithHTML(
    `‚úÖ –¢—ã –∫—É–ø–∏–ª <b>${amount} BTC</b> –∑–∞ <b>${separateNumber(
      totalCost
    )} –°—Ç–∞—Ä</b>.`
  );
});

mineRouter.hears(/^–∫—Ä–∏–ø—Ç–∞ –ø—Ä–æ–¥–∞—Ç—å.*$/i, async (ctx) => {
  const amountText = ctx.message.text.split(" ")[2];
  const amount = Number(amountText);

  if (isNaN(amount) || amount <= 0) {
    return ctx.reply("‚ùå –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC");
  }

  const user = ctx.state.user;
  const mineInfo = await getMineInfo();
  const price = mineInfo.currency || 0;
  const bankBuyPrice = Math.trunc(price * 0.95);
  const totalReceive = Math.floor(amount * bankBuyPrice);

  if (user.coin < amount) {
    return ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BTCüò¢");
  }

  user.coin -= amount;
  user.balance += totalReceive;
  mineInfo.coin += amount;

  await user.save();
  await mineInfo.save();

  await ctx.replyWithHTML(
    `‚úÖ –¢—ã –ø—Ä–æ–¥–∞–ª <b>${amount} BTC</b> –∏ –ø–æ–ª—É—á–∏–ª <b>${separateNumber(
      totalReceive
    )} –°—Ç–∞—Ä</b>.`
  );
});

mineRouter.hears(/^–ø–µ—Ä–µ–¥–∞—Ç—å –∫—Ä–∏–ø—Ç—É.*$/i, async (ctx, next) => {
  const chatId = ctx.from.id;
  const textParts = ctx.message.text.split(" ");
  const amount = parseInt(textParts[2]);

  if (isNaN(amount) || amount <= 0) {
    return;
  }

  let receiver;
  let viaUsername = false;

  try {
    const resolved = await resolveReceiver(ctx);
    receiver = resolved.receiver;
    viaUsername = resolved.transferredViaUsername;
  } catch (err) {
    switch (err.message) {
      case "BOT_REJECT":
        return ctx.reply("–ó–∞—á–µ–º –±–æ—Ç—É BTC üßê");
      case "NO_TARGET":
        return ctx.reply("–°–¥–µ–ª–∞–π —Ä–µ–ø–ª–∞–π –∏–ª–∏ —É–∫–∞–∂–∏ @username.");
      case "NOT_FOUND":
        return ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      case "SELF_TRANSFER":
        return ctx.reply("–ò–¥–∏ –Ω–∞—Ö—É–π, —Ç–∞–∫ –Ω–µ–ª—å–∑—èüñï");
      default:
        console.error("resolveReceiver error:", err);
        return ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è.");
    }
  }

  try {
    const sender = await getUser(chatId);

    if (sender.coin < amount) {
      return ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BTC ü•≤");
    }

    sender.coin -= amount;
    receiver.coin += amount;
    await sender.save();
    await receiver.save();

    await ctx.reply(
      `–¢—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–ª(–∞) ${separateNumber(amount)} ‚Çø ` +
        `${receiver.firstname}`
    );

    if (viaUsername) {
      try {
        await ctx.telegram.sendMessage(
          receiver.chatId,
          `–¢–µ–±–µ –ø–µ—Ä–µ–¥–∞–ª–∏ ${separateNumber(amount)} ‚Çø –æ—Ç ${ctx.from.first_name}`
        );
      } catch (e) {
        console.log("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", e.message);
      }
    }

    return next();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ ‚Çø:", error);
    return ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏.");
  }
});

export default mineRouter;
