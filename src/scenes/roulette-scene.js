const { Scenes } = require("telegraf");
const { getUser } = require("../db/functions");
const {
  getWinAmount,
  getWinColor,
} = require("../modules/game-module/games/roulette");
const { gamesLog } = require("../modules/logs-module/globalLogs");
const rightCalback = require("../modules/game-module/game-utils/roulette-util");
const { checkAction, saveAction } = require("../utils/helpers");

const rouletteScene = new Scenes.BaseScene("rouletteScene");

rouletteScene.enter(async (ctx) => {
  const user = await getUser(
    ctx.from.id,
    ctx.from.first_name,
    ctx.from.username
  );
  const message = `üÉè –î–ª—è –∏–≥—Ä—ã –≤ —Ä—É–ª–µ—Ç–∫—É —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—É–º–º—É, –Ω–∞–ø–∏—Å–∞–≤ –µ—ë –≤ —á–∞—Ç, –∞ –ø–æ—Ç–æ–º –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ —Å—Ç–∞–≤–∫–æ–π.\n\n–ë–∞–ª–∞–Ω—Å: ${user.balance}`;
  await ctx.reply(message);
});

rouletteScene.hears(/^(\d+)$/, async (ctx) => {
  try {
    const user = await getUser(
      ctx.from.id,
      ctx.from.first_name,
      ctx.from.username
    );

    const balance = user.balance;

    const amount = Number(ctx.match[1]);

    if (balance < amount) {
      await ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Ñ–∞üò¢");
      return;
    }

    ctx.session.amount = amount;
    const sendedMessage = await ctx.replyWithPhoto(
      { source: "img/roulette.jpg" },
      {
        caption:
          "üÉè –°—Ç–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞.\n\n–°—Ç–∞–≤–∫–∞: " + amount + "\n–ë–∞–ª–∞–Ω—Å: " + balance,
        reply_markup: {
          inline_keyboard: [
            [
              { text: "–ó–µ—Ä–æ", callback_data: "0" },
              { text: "–ö—Ä–∞—Å–Ω–æ–µ", callback_data: "–∫—Ä–∞—Å–Ω–æ–µ" },
              { text: "–ß–µ—Ä–Ω–æ–µ", callback_data: "—á–µ—Ä–Ω–æ–µ" },
            ],
            [
              { text: "1-12", callback_data: "1-12" },
              { text: "13-24", callback_data: "13-24" },
              { text: "25-36", callback_data: "25-36" },
            ],
            [
              { text: "–ß–µ—Ç", callback_data: "—á–µ—Ç" },
              { text: "1-18", callback_data: "1-18" },
              { text: "19-36", callback_data: "19-36" },
              { text: "–ù–µ—á–µ—Ç", callback_data: "–Ω–µ—á–µ—Ç" },
            ],
            [{ text: "–û—Ç–º–µ–Ω–∞", callback_data: "–û—Ç–º–µ–Ω–∞" }],
          ],
        },
      }
    );
    await saveAction(user.id, sendedMessage);
  } catch (error) {
    console.log(error);
  }
});

rouletteScene.action("–û—Ç–º–µ–Ω–∞", async (ctx) => {
  await ctx.deleteMessage();
  await ctx.reply("–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
  ctx.scene.leave();
});

rouletteScene.on("callback_query", async (ctx) => {
  try {
    await ctx.deleteMessage();
    const { amount } = ctx.session;

    const user = await getUser(
      ctx.from.id,
      ctx.from.first_name,
      ctx.from.username
    );

    await checkAction(user.id, ctx);

    if (user.balance < amount) {
      await ctx.reply("–£ –≤–∞—Å –∫–æ–Ω—á–∏–ª—Å—è –º–µ—Ñüò¢\n–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω–∞–±–µ—Ä–∏—Ç–µ —Ä—É–ª–µ—Ç–∫–∞");
      ctx.scene.leave();
      return;
    }

    const bet = ctx.callbackQuery.data;

    if (rightCalback.includes(bet)) {
      const winNumber = Math.floor(Math.random() * 36 + 1); // –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 36
      const winColor = getWinColor(winNumber);
      const winAmount = getWinAmount(amount, bet, winNumber);
      const message = `–í—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ: ${winNumber} (${winColor}),\n–¢–≤–æ—è —Å—Ç–∞–≤–∫–∞: ${amount} –Ω–∞ (${bet}). ${
        winAmount > 0
          ? `\nü•≥ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${winAmount}!\n\n–ë–∞–ª–∞–Ω—Å: ${
              user.balance - amount + winAmount
            }`
          : `\nüòî –£–≤—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n–ë–∞–ª–∞–Ω—Å: ${
              user.balance - amount
            }`
      }`;

      const sendedMessage = await ctx.replyWithPhoto(
        { source: "img/roulette.jpg" },
        {
          caption: message,
          reply_markup: {
            inline_keyboard: [
              [
                { text: "–ó–µ—Ä–æ", callback_data: "0" },
                { text: "–ö—Ä–∞—Å–Ω–æ–µ", callback_data: "–∫—Ä–∞—Å–Ω–æ–µ" },
                { text: "–ß–µ—Ä–Ω–æ–µ", callback_data: "—á–µ—Ä–Ω–æ–µ" },
              ],
              [
                { text: "1-12", callback_data: "1-12" },
                { text: "13-24", callback_data: "13-24" },
                { text: "25-36", callback_data: "25-36" },
              ],
              [
                { text: "–ß–µ—Ç", callback_data: "—á–µ—Ç" },
                { text: "1-18", callback_data: "1-18" },
                { text: "19-36", callback_data: "19-36" },
                { text: "–ù–µ—á–µ—Ç", callback_data: "–Ω–µ—á–µ—Ç" },
              ],
              [{ text: "–û—Ç–º–µ–Ω–∞", callback_data: "–û—Ç–º–µ–Ω–∞" }],
            ],
          },
        }
      );

      await saveAction(user.id, sendedMessage);
      const previousBalance = user.balance;
      user.balance -= amount;
      user.balance += winAmount;
      await gamesLog(user, "—Ä—É–ª–µ—Ç–∫—É", winAmount, previousBalance);
      await user.save();
    } else {
      ctx.scene.leave();
    }
  } catch (error) {
    return;
  }
});

module.exports = { rouletteScene };
