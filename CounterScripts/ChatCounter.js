const Sequelize = require("sequelize");
const Op = Sequelize.Op;
const { Composer } = require("telegraf");
const { getUser } = require("../DataBase/helpWithDb");
const User = require("../DataBase/models");

const MessageCounter = new Composer();

const regex = /([_*][)~(`>#+\-=|{}.!])/g;
const allowedChats = [-1001680708708];

MessageCounter.hears(/–∞–∫—Ç–∏–≤ –¥–µ–Ω—å/i, async (ctx) => {
  const users = await User.findAll({
    where: {
      dayMessageCounter: {
        [Op.gt]: 0, // <--- –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ—Å—Ç–æ: 0
      },
    },
    order: [["dayMessageCounter", "DESC"]],
    limit: 15,
  });

  const message = users
    .map(
      (user, index) =>
        `${index + 1}. [${user.firstname.replace(
          regex,
          "\\$&"
        )}](https://t.me/${user.username}): ${user.dayMessageCounter}`
    )
    .join("\n");

  ctx.reply(
    `‚ùóÔ∏è–¢–æ–ø-15 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –¥–µ–Ω—å‚ùóÔ∏è\n
${message}`,
    {
      disable_notification: true,
      parse_mode: "Markdown",
      disable_web_page_preview: true,
    }
  );
});
MessageCounter.hears(/–∞–∫—Ç–∏–≤ –Ω–µ–¥–µ–ª—è/i, async (ctx) => {
  const users = await User.findAll({
    where: {
      weekMessageCounter: {
        [Op.gt]: 0,
      },
    },
    order: [["weekMessageCounter", "DESC"]],
    limit: 15,
  });

  const message = users
    .map(
      (user, index) =>
        `${index + 1}. [${user.firstname.replace(
          regex,
          "\\$&"
        )}](https://t.me/${user.username}): ${user.weekMessageCounter}`
    )
    .join("\n");

  ctx.reply(
    `‚ùóÔ∏è–¢–æ–ø-15 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é‚ùóÔ∏è\n
${message}`,
    {
      disable_notification: true,
      parse_mode: "Markdown",
      disable_web_page_preview: true,
    }
  );
});
MessageCounter.hears(/–∞–∫—Ç–∏–≤ –º–µ—Å—è—Ü/i, async (ctx) => {
  const users = await User.findAll({
    where: {
      monthMessageCounter: {
        [Op.gt]: 0,
      },
    },
    order: [["monthMessageCounter", "DESC"]],
    limit: 15,
  });

  const message = users
    .map(
      (user, index) =>
        `${index + 1}. [${user.firstname.replace(
          regex,
          "\\$&"
        )}](https://t.me/${user.username}): ${user.monthMessageCounter}`
    )
    .join("\n");

  ctx.reply(
    `‚ùóÔ∏è–¢–æ–ø-15 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –º–µ—Å—è—Ü‚ùóÔ∏è\n
${message}`,
    {
      disable_notification: true,
      parse_mode: "Markdown",
      disable_web_page_preview: true,
    }
  );
});

MessageCounter.on("message", async (ctx) => {
  const chatId = ctx.chat.id;
  const needType = ctx.chat.type !== "private";
  if (!allowedChats.includes(chatId) && needType) {
    try {
      await ctx.reply(
        "–Ø –Ω–µ –º–æ–≥—É –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —ç—Ç–æ–º —á–∞—Ç–µüòò\n\n–ë–æ—Ç —Å–æ–∑–¥–∞–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —á–∞—Ç–∞ @mefpablo"
      );
      await ctx.leaveChat();
      return;
    } catch (error) {
      console.log(error);
    }
  }
  const user = await getUser(
    ctx.from.id,
    ctx.from.first_name,
    ctx.from.username
  );
  if (needType) {
    user.dayMessageCounter++;
    user.weekMessageCounter++;
    user.monthMessageCounter++;
    user.save();
  }
});

module.exports = MessageCounter;
