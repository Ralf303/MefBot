const { Item } = require("../db/models.js");
const { gamesLog, resiveLog } = require("../logs/globalLogs.js");
const { sleep, formatTime, getRandomInt } = require("./helpers.js");

async function dice(word3, word2, user, bot, ctx) {
  const stake = Number(word2);
  const userInput = word3;
  const userTrueImput =
    Number(word3) <= 6 || word3 === "–Ω–µ—á–µ—Ç" || word3 === "—á–µ—Ç";
  let winAmount = 0;
  const previousBalance = user.balance;

  if (userTrueImput && user.balance >= stake && stake >= 500) {
    user.balance -= stake;
    const info = await bot.telegram.sendDice(ctx.chat.id);
    await sleep(3800);
    const dice = info.dice.value;

    if (Number(userInput) >= 1 && Number(userInput) <= 6) {
      if (Number(userInput) === dice) {
        ctx.reply(
          `ü•≥ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ö—É–±–∏–∫ –ø–æ–∫–∞–∑–∞–ª ${dice}\n –í—ã–∏–≥—Ä—ã—à ${stake * 5}`
        );
        winAmount = stake * 5;
      } else {
        ctx.reply(`üò¢ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ö—É–±–∏–∫ –ø–æ–∫–∞–∑–∞–ª ${dice}`);
      }
    } else if (userInput === "—á–µ—Ç" || userInput === "–Ω–µ—á–µ—Ç") {
      const isEven = dice % 2 === 0;
      if (
        (isEven && userInput === "—á–µ—Ç") ||
        (!isEven && userInput === "–Ω–µ—á–µ—Ç")
      ) {
        ctx.reply(
          `ü•≥ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ö—É–±–∏–∫ –ø–æ–∫–∞–∑–∞–ª ${dice} (—á–∏—Å–ª–æ ${
            isEven ? "—á—ë—Ç–Ω–æ–µ" : "–Ω–µ—á—ë—Ç–Ω–æ–µ"
          })\n –í—ã–∏–≥—Ä—ã—à ${stake * 1.5}`
        );
        winAmount = stake * 1.5;
      } else {
        winAmount = 0;
        ctx.reply(
          `üò¢ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ö—É–±–∏–∫ –ø–æ–∫–∞–∑–∞–ª ${dice} (—á–∏—Å–ª–æ ${
            isEven ? "—á–µ—Ç–Ω–æ–µ" : "–Ω–µ—á–µ—Ç–Ω–æ–µ"
          })`
        );
      }
    }

    user.balance += winAmount;
    await gamesLog(user, "–∫—É–±–∏–∫", winAmount, previousBalance);
    await user.save();
  } else if (stake > user.balance) {
    ctx.reply("–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Ñ–∞üò¢");
  } else if (stake < 500) {
    ctx.reply("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 500");
  } else {
    ctx.reply(
      '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É, –∞ –¥–∞–ª—å—à–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6, "—á–µ—Ç" –∏–ª–∏ "–Ω–µ—á–µ—Ç", –Ω–∞–ø—Ä–∏–º–µ—Ä "–∫—É–± 1000 5" –∏–ª–∏ "–∫—É–± 500 –Ω–µ—á–µ—Ç"'
    );
  }
}

async function bandit(word2, user, ctx) {
  const fruits = ["üçá", "üçä", "üçê", "üçã", "üçí", "üçì", "üçë", "üçâ", "üçå", "üçç"];
  const needChat =
    ctx.chat.id == -1001672482562 ||
    ctx.chat.id == -1001680708708 ||
    ctx.chat.type === "private";
  try {
    let stake = Number(word2);
    let winAmount = 0;
    const previousBalance = user.balance;

    if (stake > 499 && user.balance >= stake && stake && needChat) {
      user.balance -= stake;
      const randEmoji = () => fruits[Math.floor(Math.random() * fruits.length)];
      const randomEmojis = [randEmoji(), randEmoji(), randEmoji()];

      if (randomEmojis.every((e) => e === randomEmojis[0])) {
        winAmount = stake * 10;
        ctx.reply(
          `ü§ë–î–ñ–ï–ö–ü–û–¢ü§ë\n${randomEmojis.join("|")}\n @${
            ctx.from.username
          } –≤—ã–∏–≥—Ä—ã—à ${stake * 10}!`
        );
      } else if (
        randomEmojis[0] === randomEmojis[1] ||
        randomEmojis[0] === randomEmojis[2] ||
        randomEmojis[1] === randomEmojis[2]
      ) {
        winAmount = stake * 3;
        ctx.reply(
          `${randomEmojis.join("|")}\n @${ctx.from.username} –≤—ã–∏–≥—Ä—ã—à ${
            stake * 3
          }!`
        );
      } else {
        ctx.reply(`${randomEmojis.join("|")}\n @${ctx.from.username} —Å–ª–∏–≤ ü•±`);
        winAmount = 0;
      }

      user.balance += winAmount;

      await gamesLog(user, "–±–∞–Ω–¥–∏—Ç", winAmount, previousBalance);
      await user.save();
    } else if (stake > user.balance) {
      ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Ñ–∞üò¢");
    } else if (!needChat) {
      ctx.reply("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–ø–∞–º–∞, –±–∞–Ω–¥–∏—Ç –ª–∏–±–æ –≤ –ª—Å –ª–∏–±–æ –≤ @mefanarhia");
    } else {
      ctx.reply('–í–≤–µ–¥–∏ "–±–∞–Ω–¥–∏—Ç [—Å—Ç–∞–≤–∫–∞]" –±–æ–ª—å—à–µ 500');
    }
  } catch (e) {
    console.log(e);
  }
}

async function userFerma(ctx, user) {
  const now = Math.floor(Date.now() / 1000);
  const lastTime = user.farmtime;
  const diff = now - lastTime;

  if (
    (diff >= 3600 && user.timelvl === 4) ||
    (diff >= 7200 && user.timelvl === 3) ||
    (diff >= 10800 && user.timelvl === 2) ||
    (diff >= 14400 && user.timelvl === 1)
  ) {
    user.farmtime = now;
    let randmef;

    if (user.meflvl === 1) {
      randmef = getRandomInt(50, 100);
    } else if (user.meflvl === 2) {
      randmef = getRandomInt(100, 200);
    } else if (user.meflvl === 3) {
      randmef = getRandomInt(200, 400);
    } else {
      randmef = getRandomInt(300, 500);
    }

    // Check if the user has an item named "–°—É–ø–µ—Ä –ì—Ä–∞–±–ª–∏"
    const hasSuperGrabli = await Item.findOne({
      where: {
        userId: user.id,
        itemName: "–°—É–ø–µ—Ä –ì—Ä–∞–±–ª–∏",
        isWorn: true,
      },
    });

    if (hasSuperGrabli) {
      randmef *= 5;
    }

    ctx.reply("‚úÖ–ú–µ—Ñ —Å–æ–±—Ä–∞–Ω " + randmef);
    user.balance += randmef;
    await resiveLog(user, "–º–µ—Ñ", randmef, "—Å–±–æ—Ä —Ñ–µ—Ä–º—ã");
  } else {
    let remainingTime;

    if (user.timelvl === 4) {
      remainingTime = 3600 - diff;
    } else if (user.timelvl === 3) {
      remainingTime = 7200 - diff;
    } else if (user.timelvl === 2) {
      remainingTime = 10800 - diff;
    } else {
      remainingTime = 14400 - diff;
    }

    const formattedTime = formatTime(remainingTime);
    ctx.reply(`‚ùå–°–æ–±—Ä–∞—Ç—å –º–µ—Ñ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ ${formattedTime}`);
  }
}

async function createRP(rp, emoji, ctx, replyToMessage, comment) {
  const firstName = ctx.message.from.first_name.replaceAll(
    /[\\`*_{}\[\]()#+\-.!()]/g,
    "\\$&"
  );
  const replyFirstName = replyToMessage.from.first_name.replaceAll(
    /[\\`*_{}\[\]()#+\-.!()]/g,
    "\\$&"
  );

  console.log(comment);
  try {
    let replyMessage =
      `${emoji} [${firstName}](tg://user?id=${ctx.message.from.id}) ` +
      `${rp.replaceAll(/[\\*_{}\[\]()#+\-.!()]/g, "\\$&")} ` +
      `[${replyFirstName}](tg://user?id=${replyToMessage.from.id})`;

    if (comment) {
      replyMessage += `\n\nüí¨ –° –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: ${comment}`;
    }

    ctx.telegram.sendMessage(replyToMessage.chat.id, replyMessage, {
      reply_to_message_id: replyToMessage.message_id,
      parse_mode: "MarkdownV2",
    });
  } catch (e) {
    console.log(e);
  }
}
module.exports = { dice, bandit, userFerma, createRP };
