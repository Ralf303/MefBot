const { User } = require("../db/models");
const clothes = require("../itemsObjects/clothes");

function getRandomInt(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function generateCapcha() {
  let length = 6,
    charset = "1234567890";
  res = "";

  for (let i = 0, n = charset.length; i < length; i++) {
    res += charset.charAt(Math.floor(Math.random() * n));
  }

  return res;
}

function calculateMiningAmount(balance) {
  return Math.floor(balance * 0.1);
}

function generatePassword(length) {
  let charset =
    "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
  let retVal = "";
  for (let i = 0, n = charset.length; i < length; ++i) {
    retVal += charset.charAt(Math.floor(Math.random() * n));
  }
  return retVal;
}

function formatTime(seconds) {
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  const remainingSeconds = seconds % 60;
  let timeOutput = "";

  if (hours > 0) {
    timeOutput += `${hours} —á–∞—Å–æ–≤ `;
  }

  if (minutes > 0) {
    timeOutput += `${minutes} –º–∏–Ω—É—Ç `;
  }

  timeOutput += `${remainingSeconds} —Å–µ–∫—É–Ω–¥`;

  return timeOutput.trim();
}

function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

async function checkUserSub(ctx, channel) {
  try {
    const chatMember = await ctx.telegram.getChatMember(channel, ctx.from.id);
    const status = chatMember.status;
    const needStatus = ["member", "administrator", "creator"];

    if (needStatus.includes(status)) {
      return true;
    } else {
      return false;
    }
  } catch (error) {
    console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", error);
    return false; // –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —É –Ω–µ–≥–æ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
  }
}

async function checkUserProfile(user, ctx) {
  const message = ctx.message.reply_to_message;

  if (!message) {
    await ctx.replyWithHTML(
      "–í–∞—à –Ω–∏–∫: " +
        user.firstname +
        "\nId: <code>" +
        user.chatId +
        "</code>\n–í–∞—à –º–µ—Ñ: " +
        user.balance +
        "\n–í–∞—à–∏ –≥–µ–º—ã: " +
        user.gems +
        "\n–ö–∞–ø—á–µ–π –≤–≤–µ–¥–µ–Ω–æ: " +
        user.captureCounter +
        "\n–í–∞—à —É—Ä–æ–≤–µ–Ω—å —Å–±–æ—Ä–∞: " +
        user.meflvl +
        "\n–í–∞—à —É—Ä–æ–≤–µ–Ω—å –≤—Ä–µ–º–µ–Ω–∏: " +
        user.timelvl +
        "\n–°–ª–æ—Ç–æ–≤ –≤—Å–µ–≥–æ: " +
        user.slots +
        "\n–°–ª–æ—Ç–æ–≤ –∑–∞–Ω—è—Ç–æ: " +
        user.fullSlots
    );
    return;
  }

  const playerChatId = message.from.id;

  // –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–º
  if (message.from.is_bot) {
    await ctx.reply("–£ –±–æ—Ç–æ–≤ –Ω–µ –±—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–πüôÑ");
    return;
  }

  try {
    const player = await User.findOne({
      where: { chatId: playerChatId },
    });

    if (player) {
      await ctx.replyWithHTML(
        "–ü—Ä–æ—Ñ–∏–ª—å " +
          player.firstname +
          "\nId: <code>" +
          player.chatId +
          "</code>\n–ì—Ä–∞–º–º –º–µ—Ñ–∞: " +
          player.balance +
          "\n–ì–µ–º—ã: " +
          player.gems +
          "\n–ö–∞–ø—á–µ–π –≤–≤–µ–¥–µ–Ω–æ: " +
          player.captureCounter +
          "\n–£—Ä–æ–≤–µ–Ω—å —Å–±–æ—Ä–∞: " +
          player.meflvl +
          "\n–£—Ä–æ–≤–µ–Ω—å –≤—Ä–µ–º–µ–Ω–∏: " +
          player.timelvl +
          "\n–°–ª–æ—Ç–æ–≤ –≤—Å–µ–≥–æ: " +
          player.slots +
          "\n–°–ª–æ—Ç–æ–≤ –∑–∞–Ω—è—Ç–æ: " +
          player.fullSlots
      );
    } else {
      await ctx.reply("–Ø –Ω–∏—á–µ–≥–æ –æ –Ω–µ–º –Ω–µ –∑–Ω–∞—é...");
    }
  } catch (error) {
    console.log(error);
    await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏.");
  }
}

async function shopGenerator(id, ctx) {
  let result;
  if (id === "1") {
    result = '–ú–∞–≥–∞–∑–∏–Ω "Bomj Gang"\n\n';

    for (const item in clothes) {
      if (clothes[item].class === "low") {
        result += `‚Ä¢ ${clothes[item].name}[<code>${item}</code>] –¶–µ–Ω–∞: ${clothes[item].price}MF\n`;
      }
    }
  }

  if (id === "2") {
    result = '–ú–∞–≥–∞–∑–∏–Ω "Paul Shop"\n\n';

    for (const item in clothes) {
      if (clothes[item].class === "middle") {
        result += `‚Ä¢ ${clothes[item].name}[<code>${item}</code>] –¶–µ–Ω–∞: ${clothes[item].price}MF\n`;
      }
    }
  }

  if (id === "3") {
    result = '–ú–∞–≥–∞–∑–∏–Ω "Clemente House"\n\n';

    for (const item in clothes) {
      if (clothes[item].class === "elite") {
        result += `‚Ä¢ ${clothes[item].name}[<code>${item}</code>] –¶–µ–Ω–∞: ${clothes[item].price}MF\n`;
      }
    }
  }

  if (id === "4") {
    result = "–î–æ–Ω–∞—Ç —É—Å–ª—É–≥–∏\n\n";

    for (const item in clothes) {
      if (clothes[item].class === "vip") {
        result += `‚Ä¢ ${clothes[item].name}[<code>${item}</code>] –¶–µ–Ω–∞: ${clothes[item].price}\n`;
      }
    }

    result +=
      "‚Ä¢ –î–æ–Ω–∞—Ç –∫–µ–π—Å –¶–µ–Ω–∞: 25\n‚Ä¢ 1000 –º–µ—Ñ–∞ –¶–µ–Ω–∞: 1\n\n‚ùóÔ∏è–í—Å–µ —Ü–µ–Ω—ã –≤ —Ä—É —Ä—É–±–ª—è—Ö‚ùóÔ∏è\n";
    await ctx.replyWithHTML(
      result +
        "\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ —Å–≤—è–∑—ã–≤–∞–π—Ç–µ—Å—å —Å @ralf303" +
        "\n\nüìñ–ò–Ω—Ñ–∞ id\nüìñ–ò–Ω—Ñ–∞ –º–µ—Ñ–∫–µ–π—Å –¥–æ–Ω–∞—Ç"
    );
    return;
  }

  if (id === "5") {
    result = "üíéGem Shopüíé\n\n";
    const sortedClothes = Object.keys(clothes)
      .filter((item) => clothes[item].class === "special")
      .sort((a, b) => clothes[a].price - clothes[b].price);

    sortedClothes.forEach((item) => {
      result += `‚Ä¢ ${clothes[item].name}[<code>${item}</code>] –¶–µ–Ω–∞: ${clothes[item].price} –≥–µ–º–æ–≤\n`;
    });
  }

  if (id === "6") {
    result = "üéÑ–ù–ì –®–û–üüéÑ\n\n";
    const sortedClothes = Object.keys(clothes)
      .filter((item) => clothes[item].class === "event")
      .sort((a, b) => clothes[a].price - clothes[b].price);

    sortedClothes.forEach((item) => {
      result += `‚Ä¢ ${clothes[item].name}[<code>${item}</code>] –¶–µ–Ω–∞: ${clothes[item].price}‚ùÑÔ∏è\n`;
    });
  }

  await ctx.replyWithHTML(
    result + "\n\nüìñ–ò–Ω—Ñ–∞ id\nüìñ–ü—Ä–∏–º–µ—Ä–∏—Ç—å id\nüìñ–ö—É–ø–∏—Ç—å –≤–µ—â—å id"
  );
  return;
}

async function notify(ctx, channel) {
  await ctx.reply("–ë–æ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∏ –±–µ–∑ –¥–æ–Ω–∞—Ç–∞ –ø–æ—ç—Ç–æ–º—É –ø–æ–¥–ø–∏—à–∏—Å—å @" + channel);
}
module.exports = {
  getRandomInt,
  generateCapcha,
  sleep,
  formatTime,
  notify,
  checkUserSub,
  checkUserProfile,
  shopGenerator,
  generatePassword,
  calculateMiningAmount,
};
